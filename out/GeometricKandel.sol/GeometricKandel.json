{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Credit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Debit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "olKeyHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "makerData",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "mgvData",
          "type": "bytes32"
        }
      ],
      "name": "LogIncident",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IMangrove",
          "name": "mgv",
          "type": "address"
        }
      ],
      "name": "Mgv",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "olKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "OfferListKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PopulateEnd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PopulateStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RetractEnd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RetractStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "SetAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetBaseQuoteTickOffset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetGasprice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetGasreq",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum OfferType",
          "name": "ba",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "SetIndexMapping",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetLength",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserveId",
          "type": "address"
        }
      ],
      "name": "SetReserveId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract AbstractRouter",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "SetRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetStepSize",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONSTANT_GASREQ",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MGV",
      "outputs": [
        {
          "internalType": "contract IMangrove",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NO_ROUTER",
      "outputs": [
        {
          "internalType": "contract AbstractRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUOTE",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESERVE_ID",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TICK_SPACING",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "activate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "current",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseQuoteTickOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "checkList",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "Tick",
          "name": "baseQuoteTickIndex0",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_baseQuoteTickOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstAskIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidGives",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "askGives",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stepSize",
          "type": "uint256"
        }
      ],
      "name": "createDistribution",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "Tick",
                  "name": "tick",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "gives",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DirectWithBidsAndAsksDistribution.DistributionOffer[]",
              "name": "asks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "Tick",
                  "name": "tick",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "gives",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DirectWithBidsAndAsksDistribution.DistributionOffer[]",
              "name": "bids",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DirectWithBidsAndAsksDistribution.Distribution",
          "name": "distribution",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        }
      ],
      "name": "depositFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum OfferType",
          "name": "ba",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getOffer",
      "outputs": [
        {
          "internalType": "Offer",
          "name": "offer",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum OfferType",
          "name": "ba",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "indexOfOfferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "outbound_tkn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "inbound_tkn",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tickSpacing",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OLKey",
              "name": "olKey",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256"
            },
            {
              "internalType": "Offer",
              "name": "offer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerWants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerGives",
              "type": "uint256"
            },
            {
              "internalType": "OfferDetail",
              "name": "offerDetail",
              "type": "uint256"
            },
            {
              "internalType": "Global",
              "name": "global",
              "type": "uint256"
            },
            {
              "internalType": "Local",
              "name": "local",
              "type": "uint256"
            }
          ],
          "internalType": "struct MgvLib.SingleOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "makerExecute",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "ret",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "outbound_tkn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "inbound_tkn",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tickSpacing",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OLKey",
              "name": "olKey",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256"
            },
            {
              "internalType": "Offer",
              "name": "offer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerWants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerGives",
              "type": "uint256"
            },
            {
              "internalType": "OfferDetail",
              "name": "offerDetail",
              "type": "uint256"
            },
            {
              "internalType": "Global",
              "name": "global",
              "type": "uint256"
            },
            {
              "internalType": "Local",
              "name": "local",
              "type": "uint256"
            }
          ],
          "internalType": "struct MgvLib.SingleOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "makerData",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "mgvData",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MgvLib.OrderResult",
          "name": "result",
          "type": "tuple"
        }
      ],
      "name": "makerPosthook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reserveId",
          "type": "address"
        }
      ],
      "name": "offerGasreq",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offerGasreq",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum OfferType",
          "name": "ba",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "offerIdOfIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum OfferType",
          "name": "ba",
          "type": "uint8"
        }
      ],
      "name": "offeredVolume",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "volume",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "params",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "gasprice",
          "type": "uint32"
        },
        {
          "internalType": "uint24",
          "name": "gasreq",
          "type": "uint24"
        },
        {
          "internalType": "uint88",
          "name": "stepSize",
          "type": "uint88"
        },
        {
          "internalType": "uint112",
          "name": "pricePoints",
          "type": "uint112"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum OfferType",
          "name": "ba",
          "type": "uint8"
        }
      ],
      "name": "pending",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "Tick",
                  "name": "tick",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "gives",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DirectWithBidsAndAsksDistribution.DistributionOffer[]",
              "name": "asks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "Tick",
                  "name": "tick",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "gives",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DirectWithBidsAndAsksDistribution.DistributionOffer[]",
              "name": "bids",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DirectWithBidsAndAsksDistribution.Distribution",
          "name": "distribution",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "gasprice",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "gasreq",
              "type": "uint24"
            },
            {
              "internalType": "uint88",
              "name": "stepSize",
              "type": "uint88"
            },
            {
              "internalType": "uint112",
              "name": "pricePoints",
              "type": "uint112"
            }
          ],
          "internalType": "struct CoreKandel.Params",
          "name": "parameters",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        }
      ],
      "name": "populate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "Tick",
                  "name": "tick",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "gives",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DirectWithBidsAndAsksDistribution.DistributionOffer[]",
              "name": "asks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "Tick",
                  "name": "tick",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "gives",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DirectWithBidsAndAsksDistribution.DistributionOffer[]",
              "name": "bids",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DirectWithBidsAndAsksDistribution.Distribution",
          "name": "distribution",
          "type": "tuple"
        }
      ],
      "name": "populateChunk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "Tick",
          "name": "baseQuoteTickIndex0",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "firstAskIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidGives",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "askGives",
          "type": "uint256"
        }
      ],
      "name": "populateChunkFromOffset",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "Tick",
          "name": "baseQuoteTickIndex0",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_baseQuoteTickOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstAskIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidGives",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "askGives",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "gasprice",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "gasreq",
              "type": "uint24"
            },
            {
              "internalType": "uint88",
              "name": "stepSize",
              "type": "uint88"
            },
            {
              "internalType": "uint112",
              "name": "pricePoints",
              "type": "uint112"
            }
          ],
          "internalType": "struct CoreKandel.Params",
          "name": "parameters",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        }
      ],
      "name": "populateFromOffset",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "outbound_tkn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inbound_tkn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tickSpacing",
              "type": "uint256"
            }
          ],
          "internalType": "struct OLKey",
          "name": "olKey",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "provisionOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "provision",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum OfferType",
          "name": "ba",
          "type": "uint8"
        }
      ],
      "name": "reserveBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "freeWei",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "retractAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "retractOffers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract AbstractRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseQuoteTickOffset",
          "type": "uint256"
        }
      ],
      "name": "setBaseQuoteTickOffset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasprice",
          "type": "uint256"
        }
      ],
      "name": "setGasprice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasreq",
          "type": "uint256"
        }
      ],
      "name": "setGasreq",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractRouter",
          "name": "router_",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stepSize",
          "type": "uint256"
        }
      ],
      "name": "setStepSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdrawFromMangrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "BASE()": "ec342ad0",
    "CONSTANT_GASREQ()": "9eb7d4fe",
    "MGV()": "99fa5e2d",
    "NO_ROUTER()": "5570db1d",
    "QUOTE()": "9c579839",
    "RESERVE_ID()": "fbc7d10b",
    "TICK_SPACING()": "46ca626b",
    "activate(address[])": "5293840d",
    "admin()": "f851a440",
    "approve(address,address,uint256)": "e1f21c67",
    "baseQuoteTickOffset()": "14ee02bd",
    "checkList(address[])": "03eb17e2",
    "createDistribution(uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256)": "3fce15c9",
    "depositFunds(uint256,uint256)": "61638ed5",
    "getOffer(uint8,uint256)": "7692c328",
    "indexOfOfferId(uint8,uint256)": "ea0f394d",
    "makerExecute(((address,address,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256))": "2380fafd",
    "makerPosthook(((address,address,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bytes32,bytes32))": "c7e1bb44",
    "offerGasreq()": "cfcd2679",
    "offerGasreq(address,address)": "820db1f7",
    "offerIdOfIndex(uint8,uint256)": "bfc353f9",
    "offeredVolume(uint8)": "d2e498fe",
    "params()": "cff0ab96",
    "pending(uint8)": "98ed5340",
    "populate(((uint256,int256,uint256)[],(uint256,int256,uint256)[]),(uint32,uint24,uint88,uint112),uint256,uint256)": "148b7cea",
    "populateChunk(((uint256,int256,uint256)[],(uint256,int256,uint256)[]))": "ace67902",
    "populateChunkFromOffset(uint256,uint256,int256,uint256,uint256,uint256)": "4f605c5b",
    "populateFromOffset(uint256,uint256,int256,uint256,uint256,uint256,uint256,(uint32,uint24,uint88,uint112),uint256,uint256)": "e4f248f4",
    "provisionOf((address,address,uint256),uint256)": "a24f2b2d",
    "reserveBalance(uint8)": "18acf82f",
    "retractAndWithdraw(uint256,uint256,uint256,uint256,uint256,address)": "790532a1",
    "retractOffers(uint256,uint256)": "a2e241af",
    "router()": "f887ea40",
    "setAdmin(address)": "704b6c02",
    "setBaseQuoteTickOffset(uint256)": "a224b5e9",
    "setGasprice(uint256)": "fcaa7e2e",
    "setGasreq(uint256)": "34bd8931",
    "setRouter(address)": "c0d78655",
    "setStepSize(uint256)": "1450acd2",
    "withdrawFromMangrove(uint256,address)": "7144df24",
    "withdrawFunds(uint256,uint256,address)": "9ee8a91c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Credit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Debit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"olKeyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"makerData\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mgvData\",\"type\":\"bytes32\"}],\"name\":\"LogIncident\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IMangrove\",\"name\":\"mgv\",\"type\":\"address\"}],\"name\":\"Mgv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"olKeyHash\",\"type\":\"bytes32\"}],\"name\":\"OfferListKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PopulateEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PopulateStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RetractEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RetractStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetBaseQuoteTickOffset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetGasprice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetGasreq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum OfferType\",\"name\":\"ba\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"SetIndexMapping\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserveId\",\"type\":\"address\"}],\"name\":\"SetReserveId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract AbstractRouter\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"SetRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetStepSize\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONSTANT_GASREQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MGV\",\"outputs\":[{\"internalType\":\"contract IMangrove\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_ROUTER\",\"outputs\":[{\"internalType\":\"contract AbstractRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUOTE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_ID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TICK_SPACING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseQuoteTickOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"checkList\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"Tick\",\"name\":\"baseQuoteTickIndex0\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_baseQuoteTickOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstAskIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidGives\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"askGives\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepSize\",\"type\":\"uint256\"}],\"name\":\"createDistribution\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"gives\",\"type\":\"uint256\"}],\"internalType\":\"struct DirectWithBidsAndAsksDistribution.DistributionOffer[]\",\"name\":\"asks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"gives\",\"type\":\"uint256\"}],\"internalType\":\"struct DirectWithBidsAndAsksDistribution.DistributionOffer[]\",\"name\":\"bids\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DirectWithBidsAndAsksDistribution.Distribution\",\"name\":\"distribution\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum OfferType\",\"name\":\"ba\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOffer\",\"outputs\":[{\"internalType\":\"Offer\",\"name\":\"offer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum OfferType\",\"name\":\"ba\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"indexOfOfferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tickSpacing\",\"type\":\"uint256\"}],\"internalType\":\"struct OLKey\",\"name\":\"olKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"Offer\",\"name\":\"offer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerWants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerGives\",\"type\":\"uint256\"},{\"internalType\":\"OfferDetail\",\"name\":\"offerDetail\",\"type\":\"uint256\"},{\"internalType\":\"Global\",\"name\":\"global\",\"type\":\"uint256\"},{\"internalType\":\"Local\",\"name\":\"local\",\"type\":\"uint256\"}],\"internalType\":\"struct MgvLib.SingleOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"makerExecute\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"ret\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tickSpacing\",\"type\":\"uint256\"}],\"internalType\":\"struct OLKey\",\"name\":\"olKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"Offer\",\"name\":\"offer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerWants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerGives\",\"type\":\"uint256\"},{\"internalType\":\"OfferDetail\",\"name\":\"offerDetail\",\"type\":\"uint256\"},{\"internalType\":\"Global\",\"name\":\"global\",\"type\":\"uint256\"},{\"internalType\":\"Local\",\"name\":\"local\",\"type\":\"uint256\"}],\"internalType\":\"struct MgvLib.SingleOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"makerData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"mgvData\",\"type\":\"bytes32\"}],\"internalType\":\"struct MgvLib.OrderResult\",\"name\":\"result\",\"type\":\"tuple\"}],\"name\":\"makerPosthook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserveId\",\"type\":\"address\"}],\"name\":\"offerGasreq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerGasreq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum OfferType\",\"name\":\"ba\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"offerIdOfIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum OfferType\",\"name\":\"ba\",\"type\":\"uint8\"}],\"name\":\"offeredVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"gasprice\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"gasreq\",\"type\":\"uint24\"},{\"internalType\":\"uint88\",\"name\":\"stepSize\",\"type\":\"uint88\"},{\"internalType\":\"uint112\",\"name\":\"pricePoints\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum OfferType\",\"name\":\"ba\",\"type\":\"uint8\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"gives\",\"type\":\"uint256\"}],\"internalType\":\"struct DirectWithBidsAndAsksDistribution.DistributionOffer[]\",\"name\":\"asks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"gives\",\"type\":\"uint256\"}],\"internalType\":\"struct DirectWithBidsAndAsksDistribution.DistributionOffer[]\",\"name\":\"bids\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DirectWithBidsAndAsksDistribution.Distribution\",\"name\":\"distribution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"gasprice\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"gasreq\",\"type\":\"uint24\"},{\"internalType\":\"uint88\",\"name\":\"stepSize\",\"type\":\"uint88\"},{\"internalType\":\"uint112\",\"name\":\"pricePoints\",\"type\":\"uint112\"}],\"internalType\":\"struct CoreKandel.Params\",\"name\":\"parameters\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"name\":\"populate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"gives\",\"type\":\"uint256\"}],\"internalType\":\"struct DirectWithBidsAndAsksDistribution.DistributionOffer[]\",\"name\":\"asks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"gives\",\"type\":\"uint256\"}],\"internalType\":\"struct DirectWithBidsAndAsksDistribution.DistributionOffer[]\",\"name\":\"bids\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DirectWithBidsAndAsksDistribution.Distribution\",\"name\":\"distribution\",\"type\":\"tuple\"}],\"name\":\"populateChunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"Tick\",\"name\":\"baseQuoteTickIndex0\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"firstAskIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidGives\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"askGives\",\"type\":\"uint256\"}],\"name\":\"populateChunkFromOffset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"Tick\",\"name\":\"baseQuoteTickIndex0\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_baseQuoteTickOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstAskIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidGives\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"askGives\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"gasprice\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"gasreq\",\"type\":\"uint24\"},{\"internalType\":\"uint88\",\"name\":\"stepSize\",\"type\":\"uint88\"},{\"internalType\":\"uint112\",\"name\":\"pricePoints\",\"type\":\"uint112\"}],\"internalType\":\"struct CoreKandel.Params\",\"name\":\"parameters\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"name\":\"populateFromOffset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tickSpacing\",\"type\":\"uint256\"}],\"internalType\":\"struct OLKey\",\"name\":\"olKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"provisionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"provision\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum OfferType\",\"name\":\"ba\",\"type\":\"uint8\"}],\"name\":\"reserveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeWei\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"retractAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"retractOffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract AbstractRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseQuoteTickOffset\",\"type\":\"uint256\"}],\"name\":\"setBaseQuoteTickOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasprice\",\"type\":\"uint256\"}],\"name\":\"setGasprice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasreq\",\"type\":\"uint256\"}],\"name\":\"setGasreq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractRouter\",\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stepSize\",\"type\":\"uint256\"}],\"name\":\"setStepSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawFromMangrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Credit(address,uint256)\":{\"params\":{\"amount\":\"the amount.\",\"token\":\"the asset. This is indexed so that RPC calls can filter on it.\"}},\"Debit(address,uint256)\":{\"params\":{\"amount\":\"the amount.\",\"token\":\"the asset. This is indexed so that RPC calls can filter on it.\"}},\"LogIncident(bytes32,uint256,bytes32,bytes32)\":{\"params\":{\"makerData\":\"from the maker.\",\"mgvData\":\"from Mangrove.\",\"offerId\":\"the Mangrove offer id. This is indexed so that RPC calls can filter on it.\",\"olKeyHash\":\"the hash of the offer list key. This is indexed so that RPC calls can filter on it.\"}},\"Mgv(address)\":{\"params\":{\"mgv\":\"The Mangrove deployment.\"}},\"OfferListKey(bytes32)\":{\"params\":{\"olKeyHash\":\"of the market Kandel is making\"}},\"SetAdmin(address)\":{\"params\":{\"admin\":\"The new admin.\"}},\"SetBaseQuoteTickOffset(uint256)\":{\"params\":{\"value\":\"the tick offset.\"}},\"SetGasprice(uint256)\":{\"params\":{\"value\":\"the gasprice for offers.\"}},\"SetGasreq(uint256)\":{\"params\":{\"value\":\"the gasreq (including router's gasreq) for offers\"}},\"SetIndexMapping(uint8,uint256,uint256)\":{\"params\":{\"ba\":\"the offer type\",\"index\":\"the index\",\"offerId\":\"the Mangrove offer id.\"}},\"SetLength(uint256)\":{\"params\":{\"value\":\"the length.\"}},\"SetReserveId(address)\":{\"params\":{\"reserveId\":\"identifier of this contract's reserve when using a router. This is indexed so that RPC calls can filter on it.\"}},\"SetRouter(address)\":{\"params\":{\"router\":\"the new router address.\"}},\"SetStepSize(uint256)\":{\"params\":{\"value\":\"the step size in amount of price points to jump for posting dual offer\"}}},\"kind\":\"dev\",\"methods\":{\"activate(address[])\":{\"params\":{\"tokens\":\"the ERC20 `this` will approve to be able to trade on Mangrove's corresponding markets.\"}},\"admin()\":{\"returns\":{\"current\":\"admin.\"}},\"approve(address,address,uint256)\":{\"details\":\"admin may use this function to revoke specific approvals of `this` that are set after a call to `activate`.\",\"params\":{\"amount\":\"the spending amount\",\"spender\":\"the approved spender\",\"token\":\"the ERC20 token contract\"},\"returns\":{\"_0\":\"result of token approval.\"}},\"checkList(address[])\":{\"details\":\"throws with a reason if something (e.g. an approval) is missing.\",\"params\":{\"tokens\":\"the list of tokens that are traded by this contract\"}},\"constructor\":{\"params\":{\"gasreq\":\"the gasreq to use for offers\",\"mgv\":\"The Mangrove deployment.\",\"olKeyBaseQuote\":\"The OLKey for the outbound_tkn base and inbound_tkn quote offer list Kandel will act on, the flipped OLKey is used for the opposite offer list.\",\"reserveId\":\"identifier of this contract's reserve when using a router.\"}},\"createDistribution(uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"the absolute price of an offer is the ratio of quote/base volumes of tokens it tradesthe tick of offers on Mangrove are in relative taker price of maker's inbound/outbound volumes of tokens it tradesfor Bids, outbound_tkn=quote, inbound_tkn=base so relative taker price of a a bid is the inverse of the absolute price.for Asks, outbound_tkn=base, inbound_tkn=quote so relative taker price of an ask coincides with absolute price.Index0 will contain the ask with the lowest relative price and the bid with the highest relative price. Absolute price is geometrically increasing over indexes.tickOffset moves an offer relative price s.t. `AskTick_{i+1} = AskTick_i + tickOffset` and `BidTick_{i+1} = BidTick_i - tickOffset`A hole is left in the middle at the size of stepSize - either an offer or its dual is posted, not both.The caller should make sure the minimum and maximum tick does not exceed the MIN_TICK and MAX_TICK from respectively; otherwise, populate will fail for those offers.If type(uint).max is used for `bidGives` or `askGives` then very high or low prices can yield gives=0 (which results in both offer an dual being dead) or gives>=type(uin96).max which is not supported by Mangrove.\",\"params\":{\"_baseQuoteTickOffset\":\"the tick offset used for the geometric progression deployment. Must be at least 1. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.\",\"askGives\":\"The initial amount of base to give for all asks. If 0, only book the offer, if type(uint).max then bidGives is used as quote for asks, and the base the ask gives is set to according to the price.\",\"baseQuoteTickIndex0\":\"the tick of base per quote for the price point at index 0. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.\",\"bidGives\":\"The initial amount of quote to give for all bids. If 0, only book the offer, if type(uint).max then askGives is used as base for bids, and the quote the bid gives is set to according to the price.\",\"firstAskIndex\":\"the (inclusive) index after which offer should be an ask. Must be at most `pricePoints`.\",\"from\":\"populate offers starting from this index (inclusive). Must be at most `pricePoints`.\",\"pricePoints\":\"the number of price points for the Kandel instance. Must be at least 2.\",\"stepSize\":\"in amount of price points to jump for posting dual offer. Must be less than `pricePoints`.\",\"to\":\"populate offers until this index (exclusive). Must be at most `pricePoints`.\"},\"returns\":{\"distribution\":\"the distribution of bids and asks to populate\"}},\"depositFunds(uint256,uint256)\":{\"params\":{\"baseAmount\":\"the amount of base tokens to deposit.\",\"quoteAmount\":\"the amount of quote tokens to deposit.\"}},\"getOffer(uint8,uint256)\":{\"params\":{\"ba\":\"the offer type.\",\"index\":\"the index.\"},\"returns\":{\"offer\":\"the Mangrove offer.\"}},\"indexOfOfferId(uint8,uint256)\":{\"params\":{\"ba\":\"the offer type\",\"offerId\":\"the Mangrove offer id.\"},\"returns\":{\"index\":\"the index.\"}},\"makerExecute(((address,address,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"it may not be overriden although it can be customized using `__lastLook__`, `__put__` and `__get__` hooks. NB #1: if `makerExecute` reverts, the offer will be considered to be refusing the trade. NB #2: `makerExecute` may return a `bytes32` word to pass information to posthook w/o using storage reads/writes. NB #3: Reneging on trade will have the following effects: * Offer is removed from the Offer List * Offer bounty will be withdrawn from offer provision and sent to the offer taker. The remaining provision will be credited to `this` contract's account on Mangrove\",\"params\":{\"order\":\"a data structure that recapitulates the taker order and the offer as it was posted on mangrove\"},\"returns\":{\"ret\":\"a bytes32 word to pass information (if needed) to the posthook\"}},\"makerPosthook(((address,address,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bytes32,bytes32))\":{\"details\":\"It cannot be overridden but can be customized via the hooks `__posthookSuccess__`, `__posthookFallback__` and `__handleResidualProvision__` (see below).\",\"params\":{\"order\":\"a data structure that recapitulates the taker order and the offer as it was posted on mangrove\",\"result\":\"a data structure that gathers information about trade execution\"}},\"offerGasreq()\":{\"details\":\"call may revert if the strategy uses a reserveId or token dependant routing strategy and has no default\",\"returns\":{\"_0\":\"gas requirement for the default liquidity sourcing strategy\"}},\"offerGasreq(address,address)\":{\"params\":{\"reserveId\":\"passed to router to potentially specify a reserve specific routing strategy\",\"token\":\"passed to router to potentially specify a token specific routing strategy\"},\"returns\":{\"_0\":\"gas cost including router specific costs (if any).\"}},\"offerIdOfIndex(uint8,uint256)\":{\"params\":{\"ba\":\"the offer type\",\"index\":\"the index\"},\"returns\":{\"offerId\":\"the Mangrove offer id.\"}},\"offeredVolume(uint8)\":{\"details\":\"function is very gas costly, for external calls only.\",\"params\":{\"ba\":\"offer type.\"},\"returns\":{\"volume\":\"the total gives of all offers of the offer type.\"}},\"pending(uint8)\":{\"details\":\"Gas costly function, better suited for off chain calls.\",\"params\":{\"ba\":\"offer type.\"},\"returns\":{\"_0\":\"the pending amount\"}},\"populate(((uint256,int256,uint256)[],(uint256,int256,uint256)[]),(uint32,uint24,uint88,uint112),uint256,uint256)\":{\"details\":\"This function is used at initialization and can fund with provision for the offers.Use `populateChunk` to split up initialization or re-initialization with same parameters, as this function will emit.If this function is invoked with different pricePoints or stepSize, then first retract all offers.msg.value must be enough to provision all posted offers (for chunked initialization only one call needs to send native tokens).\",\"params\":{\"baseAmount\":\"base amount to deposit\",\"distribution\":\"the distribution of bids and asks to populate\",\"parameters\":\"the parameters for Kandel. Only changed parameters will cause updates. Set `gasreq` and `gasprice` to 0 to keep existing values.\",\"quoteAmount\":\"quote amount to deposit\"}},\"populateChunk(((uint256,int256,uint256)[],(uint256,int256,uint256)[]))\":{\"params\":{\"distribution\":\"the distribution of bids and asks to populate\"}},\"populateChunkFromOffset(uint256,uint256,int256,uint256,uint256,uint256)\":{\"details\":\"This is typically used after a call to `populateFromOffset` to populate the rest of the offers with the same parameters. See that function for further details.\",\"params\":{\"askGives\":\"The initial amount of base to give for all asks. If 0, only book the offer, if type(uint).max then bidGives is used as quote for asks, and the base the ask gives is set to according to the price.\",\"baseQuoteTickIndex0\":\"the tick of base per quote for the price point at index 0. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.\",\"bidGives\":\"The initial amount of quote to give for all bids. If 0, only book the offer, if type(uint).max then askGives is used as base for bids, and the quote the bid gives is set to according to the price.\",\"firstAskIndex\":\"the (inclusive) index after which offer should be an ask.\",\"from\":\"populate offers starting from this index (inclusive).\",\"to\":\"populate offers until this index (exclusive).\"}},\"populateFromOffset(uint256,uint256,int256,uint256,uint256,uint256,uint256,(uint32,uint24,uint88,uint112),uint256,uint256)\":{\"details\":\"See `createDistribution` for further details.\",\"params\":{\"_baseQuoteTickOffset\":\"the tick offset used for the geometric progression deployment. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.\",\"askGives\":\"The initial amount of base to give for all asks. If 0, only book the offer, if type(uint).max then bidGives is used as quote for asks, and the base the ask gives is set to according to the price.\",\"baseAmount\":\"base amount to deposit\",\"baseQuoteTickIndex0\":\"the tick of base per quote for the price point at index 0. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.\",\"bidGives\":\"The initial amount of quote to give for all bids. If 0, only book the offer, if type(uint).max then askGives is used as base for bids, and the quote the bid gives is set to according to the price.\",\"firstAskIndex\":\"the (inclusive) index after which offer should be an ask.\",\"from\":\"populate offers starting from this index (inclusive).\",\"parameters\":\"the parameters for Kandel. Only changed parameters will cause updates. Set `gasreq` and `gasprice` to 0 to keep existing values.\",\"quoteAmount\":\"quote amount to deposit\",\"to\":\"populate offers until this index (exclusive).\"}},\"provisionOf((address,address,uint256),uint256)\":{\"params\":{\"offerId\":\"the identifier of the offer in the offer list\",\"olKey\":\"the offer list key.\"},\"returns\":{\"provision\":\"the amount of native tokens that can be redeemed when deprovisioning the offer\"}},\"reserveBalance(uint8)\":{\"params\":{\"ba\":\"the offer type.\"},\"returns\":{\"balance\":\"the balance of the token.\"}},\"retractAndWithdraw(uint256,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"baseAmount\":\"the amount of base tokens to withdraw. Use type(uint).max to denote the entire reserve balance.\",\"freeWei\":\"the amount of wei to withdraw from Mangrove. Use type(uint).max to withdraw entire available balance.\",\"from\":\"retract offers starting from this index.\",\"quoteAmount\":\"the amount of quote tokens to withdraw. Use type(uint).max to denote the entire reserve balance.\",\"recipient\":\"the recipient of the funds.\",\"to\":\"retract offers until this index.\"}},\"retractOffers(uint256,uint256)\":{\"details\":\"use in conjunction of `withdrawFromMangrove` if the user wishes to redeem the available WEIs.\",\"params\":{\"from\":\"the start index.\",\"to\":\"the end index.\"}},\"router()\":{\"details\":\"if contract has a no router, function returns `NO_ROUTER`.\",\"returns\":{\"_0\":\"the router.\"}},\"setAdmin(address)\":{\"params\":{\"admin_\":\"The new admin. Cannot be `address(0)`.\"}},\"setBaseQuoteTickOffset(uint256)\":{\"params\":{\"_baseQuoteTickOffset\":\"the new tick offset.\"}},\"setGasprice(uint256)\":{\"params\":{\"gasprice\":\"the gasprice.\"}},\"setGasreq(uint256)\":{\"params\":{\"gasreq\":\"the gasreq.\"}},\"setRouter(address)\":{\"details\":\"new router needs to be approved by `this` to push funds to reserve (see `activate` function). It also needs to be approved by reserve to pull from it.\",\"params\":{\"router_\":\"the new router contract that this contract should use. Use `NO_ROUTER` for no router.\"}},\"setStepSize(uint256)\":{\"params\":{\"stepSize\":\"the step size.\"}},\"withdrawFromMangrove(uint256,address)\":{\"details\":\"Since a call is made to the `receiver`, this function is subject to reentrancy.\",\"params\":{\"amount\":\"the amount of WEI one wishes to withdraw.\",\"receiver\":\"the address of the receiver of the funds.\"}},\"withdrawFunds(uint256,uint256,address)\":{\"details\":\"it is up to the caller to make sure there are still enough funds for live offers.\",\"params\":{\"baseAmount\":\"the amount of base tokens to withdraw. Use type(uint).max to denote the entire reserve balance.\",\"quoteAmount\":\"the amount of quote tokens to withdraw. Use type(uint).max to denote the entire reserve balance.\",\"recipient\":\"the address to which the withdrawn funds should be sent to.\"}}},\"title\":\"Adds a geometric price progression to a `CoreKandel` strat without storing prices for individual price points.\",\"version\":1},\"userdoc\":{\"events\":{\"Credit(address,uint256)\":{\"notice\":\"the Kandel instance is credited of `amount` by its owner.By emitting this data, an indexer will be able to keep track of what credits are made.\"},\"Debit(address,uint256)\":{\"notice\":\"the Kandel instance is debited of `amount` by its owner.By emitting this data, an indexer will be able to keep track of what debits are made.\"},\"LogIncident(bytes32,uint256,bytes32,bytes32)\":{\"notice\":\"Log incident (during post trade execution)By emitting this data, an indexer can keep track of what incidents has happened.\"},\"Mgv(address)\":{\"notice\":\"The Mangrove deployment that is allowed to call `this` for trade execution and posthook.By emitting this event, an indexer will be able to create a mapping from this contract address to the used Mangrove address.\"},\"OfferListKey(bytes32)\":{\"notice\":\"The traded offer listwe only emit this, so that the events for a Kandel is self contained. If one uses the KandelSeeder to deploy, then this information is already available from NewKandel or NewAaveKandel events.\"},\"PopulateEnd()\":{\"notice\":\"logs the end of a call to populateBy emitting this, an indexer will know that the previous PopulateStart event is over.\"},\"PopulateStart()\":{\"notice\":\"logs the start of a call to populateBy emitting this, an indexer will be able to know that the following events are in the context of populate.\"},\"RetractEnd()\":{\"notice\":\"logs the end of a call to retractOffersBy emitting this, an indexer will know that the previous RetractStart event is over.\"},\"RetractStart()\":{\"notice\":\"logs the start of a call to retractOffersBy emitting this, an indexer will be able to know that the following events are in the context of retract.\"},\"SetAdmin(address)\":{\"notice\":\"logs new `admin` of `this`By emitting this data, an indexer will be able to keep track of what address is the admin of this contract.\"},\"SetBaseQuoteTickOffset(uint256)\":{\"notice\":\"The tick offset for absolute price used for the on-chain geometric progression deployment in `createDistribution`. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.\"},\"SetGasprice(uint256)\":{\"notice\":\"the gasprice has been set.By emitting this data, an indexer will be able to keep track of what gasprice is used.\"},\"SetGasreq(uint256)\":{\"notice\":\"the gasreq has been set.By emitting this data, an indexer will be able to keep track of what gasreq is used.\"},\"SetIndexMapping(uint8,uint256,uint256)\":{\"notice\":\"a new offer of type `ba` with `offerId` was created at price `index`By emitting this data, an indexer will be able to keep track of what offer has what index.\"},\"SetLength(uint256)\":{\"notice\":\"the length of the index has been set.By emitting this data, an indexer will be able to keep track of what length is used.\"},\"SetReserveId(address)\":{\"notice\":\"`reserveId` is set in the constructorby emitting this event, an indexer will be able to keep track of what reserve is used.\"},\"SetRouter(address)\":{\"notice\":\"Logging change of router addressBy emitting this an indexer can keep track of what router is used.\"},\"SetStepSize(uint256)\":{\"notice\":\"the step size has been set.\"}},\"kind\":\"user\",\"methods\":{\"BASE()\":{\"notice\":\"base of the market Kandel is making\"},\"CONSTANT_GASREQ()\":{\"notice\":\"Gas requirement when posting offers via this strategy, excluding router requirement.\"},\"MGV()\":{\"notice\":\"The Mangrove deployment that is allowed to call `this` for trade execution and posthook.\"},\"NO_ROUTER()\":{\"notice\":\"constant for no router\"},\"QUOTE()\":{\"notice\":\"quote of the market Kandel is making\"},\"RESERVE_ID()\":{\"notice\":\"identifier of this contract's reserve when using a router\"},\"TICK_SPACING()\":{\"notice\":\"tickSpacing of the market Kandel is making\"},\"activate(address[])\":{\"notice\":\"performs the required approvals so as to allow `this` to interact with Mangrove on a set of assets.\"},\"admin()\":{\"notice\":\"Retrieves the current admin.\"},\"approve(address,address,uint256)\":{\"notice\":\"Approves a spender to transfer a certain amount of tokens on behalf of `this`.\"},\"baseQuoteTickOffset()\":{\"notice\":\"The tick offset for absolute price used for the on-chain geometric progression deployment in `createDistribution`. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.\"},\"checkList(address[])\":{\"notice\":\"verifies that Mangrove is allowed to pull tokens from this contract.\"},\"constructor\":{\"notice\":\"Constructor\"},\"createDistribution(uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Creates a distribution of bids and asks given by the parameters. Dual offers are included with gives=0.\"},\"depositFunds(uint256,uint256)\":{\"notice\":\"Deposits funds to the contract's reserve\"},\"getOffer(uint8,uint256)\":{\"notice\":\"gets the Mangrove offer at the given index for the offer type.\"},\"indexOfOfferId(uint8,uint256)\":{\"notice\":\"Maps an offer type and Mangrove offer id to index.\"},\"makerExecute(((address,address,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"`makerExecute` is the callback function to execute all offers that were posted on Mangrove by `this` contract.\"},\"makerPosthook(((address,address,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bytes32,bytes32))\":{\"notice\":\"`makerPosthook` is the callback function that is called by Mangrove *after* the offer execution.reverting during its execution will not renege on trade. Revert reason (casted to 32 bytes) is then logged by Mangrove in event `PosthookFail`.\"},\"offerGasreq()\":{\"notice\":\"offerGasreq for the default route\"},\"offerGasreq(address,address)\":{\"notice\":\"Actual gas requirement when posting offers via this strategy. Returned value may change if this contract's router is updated.\"},\"offerIdOfIndex(uint8,uint256)\":{\"notice\":\"maps index of offers to offer id on Mangrove.\"},\"offeredVolume(uint8)\":{\"notice\":\"gets the total gives of all offers of the offer type.\"},\"params()\":{\"notice\":\"Storage of the parameters for the strat.\"},\"pending(uint8)\":{\"notice\":\"gets pending liquidity for base (ask) or quote (bid). Will be negative if funds are not enough to cover all offer's promises.\"},\"populate(((uint256,int256,uint256)[],(uint256,int256,uint256)[]),(uint32,uint24,uint88,uint112),uint256,uint256)\":{\"notice\":\"publishes bids/asks for the distribution in the `indices`. Care must be taken to publish offers in meaningful chunks. For Kandel an offer and its dual should be published in the same chunk (one being optionally initially dead).\"},\"populateChunk(((uint256,int256,uint256)[],(uint256,int256,uint256)[]))\":{\"notice\":\"Publishes bids/asks for the distribution in the `indices`. Care must be taken to publish offers in meaningful chunks. For Kandel an offer and its dual should be published in the same chunk (one being optionally initially dead).This function is used externally after `populate` to reinitialize some indices or if multiple transactions are needed to split initialization due to gas cost.This function is not payable, use `populate` to fund along with populate.\"},\"populateChunkFromOffset(uint256,uint256,int256,uint256,uint256,uint256)\":{\"notice\":\"publishes bids/asks according to a geometric distribution, and reads parameters from the Kandel instance.\"},\"populateFromOffset(uint256,uint256,int256,uint256,uint256,uint256,uint256,(uint32,uint24,uint88,uint112),uint256,uint256)\":{\"notice\":\"publishes bids/asks according to a geometric distribution, and sets all parameters according to inputs.\"},\"provisionOf((address,address,uint256),uint256)\":{\"notice\":\"computes the amount of native tokens that can be redeemed when deprovisioning a given offer.\"},\"reserveBalance(uint8)\":{\"notice\":\"the total balance available for the strat of the offered token for the given offer type.\"},\"retractAndWithdraw(uint256,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Retracts offers, withdraws funds, and withdraws free wei from Mangrove.\"},\"retractOffers(uint256,uint256)\":{\"notice\":\"retracts and deprovisions offers of the distribution interval `[from, to[`.\"},\"router()\":{\"notice\":\"Contract's router getter.\"},\"setAdmin(address)\":{\"notice\":\"This sets the admin. Only the current admin can change the admin.\"},\"setBaseQuoteTickOffset(uint256)\":{\"notice\":\"sets the tick offset if different from existing.\"},\"setGasprice(uint256)\":{\"notice\":\"sets the gasprice for offers\"},\"setGasreq(uint256)\":{\"notice\":\"sets the gasreq (including router's gasreq) for offers\"},\"setRouter(address)\":{\"notice\":\"sets a new router to pull outbound tokens from contract's reserve to `this` and push inbound tokens to reserve.\"},\"setStepSize(uint256)\":{\"notice\":\"sets the step size\"},\"withdrawFromMangrove(uint256,address)\":{\"notice\":\"withdraws native tokens from `this` balance on Mangrove.\"},\"withdrawFunds(uint256,uint256,address)\":{\"notice\":\"withdraws funds from the contract's reserve\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/GeometricKandel.sol\":\"GeometricKandel\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@mgv-strats/lib/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/lib/\",\":@mgv-strats/script/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/script/\",\":@mgv-strats/src/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/\",\":@mgv-strats/test/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/test/\",\":@mgv/forge-std/=node_modules/@mangrovedao/mangrove-core/lib/forge-std/src/\",\":@mgv/lib/=node_modules/@mangrovedao/mangrove-core/lib/\",\":@mgv/script/=node_modules/@mangrovedao/mangrove-core/script/\",\":@mgv/src/=node_modules/@mangrovedao/mangrove-core/src/\",\":@mgv/test/=node_modules/@mangrovedao/mangrove-core/test/\",\":ds-test/=node_modules/@mangrovedao/mangrove-core/lib/forge-std/lib/ds-test/src/\",\":mgv_arbitrage_lib/=mangrove-arbitrage/lib/\",\":mgv_arbitrage_script/=mangrove-arbitrage/script/\",\":mgv_arbitrage_src/=mangrove-arbitrage/src/\",\":mgv_arbitrage_test/=mangrove-arbitrage/test/\",\":mgv_forge-std/=node_modules/@mangrovedao/mangrove-core/lib/forge-std/src/\",\":mgv_lib/=node_modules/@mangrovedao/mangrove-core/lib/\",\":mgv_script/=node_modules/@mangrovedao/mangrove-core/script/\",\":mgv_src/=node_modules/@mangrovedao/mangrove-core/src/\",\":mgv_strats_lib/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/lib/\",\":mgv_strats_script/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/script/\",\":mgv_strats_src/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/\",\":mgv_strats_test/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/test/\",\":mgv_test/=node_modules/@mangrovedao/mangrove-core/test/\",\":uniswap_v3_lib/=mangrove-arbitrage/lib/v3-core/\"]},\"sources\":{\"node_modules/@mangrovedao/mangrove-core/lib/IERC20.sol\":{\"keccak256\":\"0xe39ef15ad326909ca8b85ee0a6d571798c4155b1d83591ab127badb082628240\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://1cb5cd93f7152410db9b23c18e515e984c65f047d586b901c1031e38507ffe49\",\"dweb:/ipfs/QmYRNEH8XHRq1zSbpXa8NpYKBVJZWVTj211Viz7FbMRrU6\"]},\"node_modules/@mangrovedao/mangrove-core/lib/TransferLib.sol\":{\"keccak256\":\"0x3a8b94d6cc226852fefada57b74fe8cb4f3e34bdcf0860825401a57097d7914b\",\"license\":\"BSD-2-Clause\",\"urls\":[\"bzz-raw://a7293b7722734c714f12fa51520c2ebf01776ca5f837c06ca27a7c775e4bf579\",\"dweb:/ipfs/QmTFm7NaHGv32fYoXbiUiMSgpWAJ5GfHoV1LTD49ZfkCpJ\"]},\"node_modules/@mangrovedao/mangrove-core/lib/core/BitLib.sol\":{\"keccak256\":\"0x5a1c56d67fbd2ef6f3b830cf8dae1885da5f40a37afd11cb3a392be573993c3b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a07b895de906f49d0ce9e89a349d39220e13039709ea2e2db46ff48310bd4b3b\",\"dweb:/ipfs/QmZyiLKyTZ9EHwqNRUYukQDdg7CL54Dsu65RYabkkGF1KM\"]},\"node_modules/@mangrovedao/mangrove-core/lib/core/Constants.sol\":{\"keccak256\":\"0xc379ed5c15639ff1f4461872ff53bacaf01372264937032854c4c549056b0b87\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://6b3ef408068d112fb1a70a880d8be678414415c76d50c675349c7c09186b3deb\",\"dweb:/ipfs/QmUhfhByzQMLFSL6ZvkggetVtRaYpLRpzs3KZJDmNhT22f\"]},\"node_modules/@mangrovedao/mangrove-core/lib/core/DensityLib.sol\":{\"keccak256\":\"0xc7ee8be7f11a1bf85aa4ea0e222d4a49d77a378b201e347f9a5e4f28f207a023\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed718e8bf3fb45bc0e7cf739662422cfe01d8d04a2c99b2fb0cfa2372629c6ad\",\"dweb:/ipfs/QmZ5QpyMSmkVxayfpZYovNcc8NGJKfVZEMKphzeKk9cVNv\"]},\"node_modules/@mangrovedao/mangrove-core/lib/core/LocalExtra.sol\":{\"keccak256\":\"0xbd3f6702242dd43ba2493eb54feb8f5d2526967512c6f156d29669b54d9c60f2\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://e389f3c78c8073bde973aa3f4770139e2adb4cc00cc1303b77eefa201189a6ff\",\"dweb:/ipfs/QmZ8vXRUUCinKtqJhV7jMXVeDVfRizhJ3NsumZLQxwSc44\"]},\"node_modules/@mangrovedao/mangrove-core/lib/core/OfferDetailExtra.sol\":{\"keccak256\":\"0x335217debbf3f4cabeaea88d4dd9777dbda2f2b6ed9684e2285a4d16e1e4464c\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://eafe358531d7dc6527d36f8fbc4bc67ab12516398c35338ba5da57a03e24b9f3\",\"dweb:/ipfs/QmcKxrcr11EM7rsKNUEJq8VXFd2R1dWSTqYk3E4k8dQfzy\"]},\"node_modules/@mangrovedao/mangrove-core/lib/core/OfferExtra.sol\":{\"keccak256\":\"0x95120d52698bc60b005496036a7c9daa7b8d0b18b571e596e86fd696b36e3264\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://684d30cc9673403cfddabdf7d979417c5df050abde16712aeaa9ca6b2725d154\",\"dweb:/ipfs/QmTkeUAMhb72BNqGjAaaPBj1NHPtKE8wH1R8bpXD5RTKtC\"]},\"node_modules/@mangrovedao/mangrove-core/lib/core/TickLib.sol\":{\"keccak256\":\"0xa4aea464925ad277aab2141885eeeb6e5f1b0963ba08d8887a1c2461c334f222\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c7ec62c85c22d7996abe32663232861f90e855c770dbd252bf49fff4ca786e74\",\"dweb:/ipfs/QmSHBJfw9bg8QjgBquXVLTS337ZuBGHVkDJfwuAZ6X48sw\"]},\"node_modules/@mangrovedao/mangrove-core/lib/core/TickTreeLib.sol\":{\"keccak256\":\"0x196c46d6e8e2ab51462f25245f7886568df3f1f65953dcec4c02d7950b4a10cd\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://4293ed5fb3ce4d350b9bb5b38342c273e6d772ace098927e006efa7fc4498329\",\"dweb:/ipfs/QmRCtk481PHQjNdt5Dsa8GYWEX46nYwdeD8R3m92w3Xjxv\"]},\"node_modules/@mangrovedao/mangrove-core/lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973\",\"dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF\"]},\"node_modules/@mangrovedao/mangrove-core/src/IMangrove.sol\":{\"keccak256\":\"0x7bb6985efa88b71ec161df4e3b6a7b27e32ccae0890c730f25a0c7f1c5e46c0b\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://4aaf49678b6cce3cb69ba3d1effe0cab9a8b37cbdd9d462c99cd6bd0679fa3ce\",\"dweb:/ipfs/QmUCby1BEr1oQtFCq4eDECiv3qrpofG7pUPTmP1GCoQc2q\"]},\"node_modules/@mangrovedao/mangrove-core/src/core/MgvLib.sol\":{\"keccak256\":\"0xe22e3d452040625724ce932cc6f57212c8a32ba021b06f5737e4c23319792c7d\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://b3ab9e3726b49b2d526f1cb6634c562cbafdbc1163753d13a3e1c316ca29e726\",\"dweb:/ipfs/QmS9bYtEVW7i9zAWmC7aPdCDv4BCaBJbhpgrJX6VhH68st\"]},\"node_modules/@mangrovedao/mangrove-core/src/preprocessed/Global.post.sol\":{\"keccak256\":\"0xddf04a10f84edc0b165351f649cad761a429b5c1b218e482917b3e38a2019e7f\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://7695a94afb1db46a65967bd63fc344b0a9387a4a2c906fdcac0433fdfec32dff\",\"dweb:/ipfs/QmcH4k6VwPrSEjqEQVsKTRjxWtmhijoknih6s6R98dnNUM\"]},\"node_modules/@mangrovedao/mangrove-core/src/preprocessed/Local.post.sol\":{\"keccak256\":\"0x03d642742c132c37c1fc29cae87f7ce1be93f89877fe698698d5bd2309c878a5\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://6957d461c6486caeee91f5fd8be2ff0f53a8c264c03e8c9b7f7291bf7a72d9fc\",\"dweb:/ipfs/QmTRqHsnjFA1xDmWWuPqn9aPeweRiYHv1wfTz77qxCmd7k\"]},\"node_modules/@mangrovedao/mangrove-core/src/preprocessed/Offer.post.sol\":{\"keccak256\":\"0x812a7c313108b56600f747d89d20b2daa4c4aa489ece1b30c561a353d41468f2\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://3fb1685a67020adeece9f6fbf567567d257aafafd2e115e6151f2b2a14b429aa\",\"dweb:/ipfs/QmUvk3FLDDHRXungxeLtPEfaQj3HNt3ib8nGhonzPdMW6o\"]},\"node_modules/@mangrovedao/mangrove-core/src/preprocessed/OfferDetail.post.sol\":{\"keccak256\":\"0xbb0c9e3177017a77de68adeed5cbbf040fc9152f914adb34575eb880979fc720\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://fac448393a94f7d797f58ece51c1127a1605397b2371c9d1fe61db0037762a91\",\"dweb:/ipfs/QmUwcWdecdqa81eLGz4SekQYfiTp5pgs2mvFRYmu7T2sew\"]},\"node_modules/@mangrovedao/mangrove-core/src/preprocessed/Structs.post.sol\":{\"keccak256\":\"0x6121b0f392dbeddf77da4f5bc5dee019878ab21538892bd22dbb9c49e9e068bb\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://336a0df7a17dd6b1ed36c4e7f19fc9ab6d4ad933f7e0b3658efba0756c7341bc\",\"dweb:/ipfs/QmZ7NQY6EJHqcE1oEho1yN9ymsTfVpUcMJABKC8Fq5GvhL\"]},\"node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/MangroveOffer.sol\":{\"keccak256\":\"0x789a104578f14acad6b783c9d2a154f9a8749fde35706af5d69361cd14a9e6be\",\"license\":\"BSD-2-Clause\",\"urls\":[\"bzz-raw://5c00fbc42821d1c0c293286c5571d6c32ff64104ab49789f95a59d20e9f6aba8\",\"dweb:/ipfs/QmR3LEBX5UJzxKM3DH8T3uVRVRgmDHkE7B9e2MMDjgokbA\"]},\"node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/interfaces/IOfferLogic.sol\":{\"keccak256\":\"0xe768d5ae2ad8cebe4aa8919230ff0bda5e306b876a4a9f50a0710c02656a3809\",\"license\":\"BSD-2-Clause\",\"urls\":[\"bzz-raw://e4230bc3c1d39f243f1e6546b1f715d89887f2572a0aec73eda11c3f2a18bdd1\",\"dweb:/ipfs/QmbUaWNuY6R93ku6tiTkSUw5p9riZT2vQiMLmcb3xSRYBh\"]},\"node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/abstract/Direct.sol\":{\"keccak256\":\"0xe925cb9996d0896123ea908cfe1d494a3ee1d24b4db19fc43c29975801568cc2\",\"license\":\"BSD-2-Clause\",\"urls\":[\"bzz-raw://a1f168082fcfc7672d9cce557440efe97b2bf95bc8f792d1754da963583bd672\",\"dweb:/ipfs/QmPuuAY4CDMcQEWKbJezNCazfX2g748Q3hX3ejCWYh4YVC\"]},\"node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/CoreKandel.sol\":{\"keccak256\":\"0x95a35ccefbafb8a79832f312b8fea6d3b84933521391c1396eb410a852e6bffd\",\"license\":\"BSD-2-Clause\",\"urls\":[\"bzz-raw://52c938e85d2d3227845345776977dbc6cd53fc27023f0decc08c66acab6d1518\",\"dweb:/ipfs/QmcSu24Udjh8nTy7VwzTjoLKmAUXfJXAv1jKbaD7PGvZiY\"]},\"node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/DirectWithBidsAndAsksDistribution.sol\":{\"keccak256\":\"0x6e424c8168ba612e53100f47ed27d73d2702d11a8ebee291944b6508f87df3c1\",\"license\":\"BSD-2-Clause\",\"urls\":[\"bzz-raw://6d71dc3b59c99071a5240764290f866a32f7114bf1c57a3d36c5ccc46f24544f\",\"dweb:/ipfs/QmRfe1i9751BfLiyWE9JpHJP6pxXzPvUWQMhiEj1qhbait\"]},\"node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/GeometricKandel.sol\":{\"keccak256\":\"0x49bf32ef326950c199d8dc7aad069779696d2aa54a6aeb65924c68fe2c93956b\",\"license\":\"BSD-2-Clause\",\"urls\":[\"bzz-raw://450bf42af8faa7f56d8102436f778ef2c3c9b91d80f21f742de78bf3de7b842b\",\"dweb:/ipfs/QmfFguoZ5wFcptVY7fXj7XHG68Eu7XNMum9GxMogz4Fo75\"]},\"node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/HasIndexedBidsAndAsks.sol\":{\"keccak256\":\"0xfb0f5e7bb82b3f7c32b05f404deeb56dcad54d61952b8b0126af006456228c09\",\"license\":\"BSD-2-Clause\",\"urls\":[\"bzz-raw://a83d4d9d0ffa6334e8ebaf2e8f3fadc4666348fe5e0da2b825630456c3316510\",\"dweb:/ipfs/QmTPYLRvhf6PTBDbFfBrjSxekvz9fPcfzaK8sKgZCazKb3\"]},\"node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/KandelLib.sol\":{\"keccak256\":\"0x58ff44666d4294134a998683f3ab26d5af8d722e299f794d5b928c8cf0fe134c\",\"license\":\"BSD-2-Clause\",\"urls\":[\"bzz-raw://7e5d9eb5c0ce7ed0e80f628289c785d81c16bdfe33d0c17aef333798820bac7b\",\"dweb:/ipfs/QmQ5VpGVx4XhpxZocQs7wFZMhV3SFoCf4xBCN7z86qiEGA\"]},\"node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/TradesBaseQuotePair.sol\":{\"keccak256\":\"0x2891ec6af9a40dffeff023e5baed8f3be28b88a4a8c1bb8c6296ead493398eaa\",\"license\":\"BSD-2-Clause\",\"urls\":[\"bzz-raw://6e2b1f6a8411d23b7414866915dfe37f29aad66a9ffabae066d0d03ae0213bcd\",\"dweb:/ipfs/QmVYfbQfHqhzZnge33o92LTRPHpkGTxkv26GiMsJb3wd5N\"]},\"node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/routers/abstract/AbstractRouter.sol\":{\"keccak256\":\"0xee7f240b669dbba8d3d90af4a0e910346a9f6ce2787400fcbad800b978cabecb\",\"license\":\"BSD-2-Clause\",\"urls\":[\"bzz-raw://762dec2ea258c2132e10012a95d8724802fb7eb67227dfc6e11da703035cd449\",\"dweb:/ipfs/QmaKxQacNfT7obLdoW9EkT1XeN5d7p1YdfcnD8fruDhBF8\"]},\"node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/utils/AccessControlled.sol\":{\"keccak256\":\"0x05d5cdef0cd8133ac3d451c81ec8e4d8253eed5f1313d2c2b60385a7cefc845a\",\"license\":\"BSD-2-Clause\",\"urls\":[\"bzz-raw://7ef36b8d3f38b47a6062aa04667320aee663630fbd3626569d1928abc2e63f07\",\"dweb:/ipfs/QmUJKfJeswYvHCujVARh3axWZEAsknNoyxNndgv2cj1EXt\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.20+commit.a1b79de6"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Credit",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Debit",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "olKeyHash",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "makerData",
              "type": "bytes32",
              "indexed": false
            },
            {
              "internalType": "bytes32",
              "name": "mgvData",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogIncident",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "contract IMangrove",
              "name": "mgv",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Mgv",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "olKeyHash",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "OfferListKey",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "PopulateEnd",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "PopulateStart",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "RetractEnd",
          "anonymous": false
        },
        {
          "inputs": [],
          "type": "event",
          "name": "RetractStart",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetAdmin",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetBaseQuoteTickOffset",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetGasprice",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetGasreq",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "enum OfferType",
              "name": "ba",
              "type": "uint8",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetIndexMapping",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetLength",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "reserveId",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "SetReserveId",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "contract AbstractRouter",
              "name": "router",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetRouter",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetStepSize",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "BASE",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "CONSTANT_GASREQ",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MGV",
          "outputs": [
            {
              "internalType": "contract IMangrove",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "NO_ROUTER",
          "outputs": [
            {
              "internalType": "contract AbstractRouter",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "QUOTE",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "RESERVE_ID",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "TICK_SPACING",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "activate"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "admin",
          "outputs": [
            {
              "internalType": "address",
              "name": "current",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "baseQuoteTickOffset",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkList"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "from",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "to",
              "type": "uint256"
            },
            {
              "internalType": "Tick",
              "name": "baseQuoteTickIndex0",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "_baseQuoteTickOffset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "firstAskIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bidGives",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "askGives",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stepSize",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "createDistribution",
          "outputs": [
            {
              "internalType": "struct DirectWithBidsAndAsksDistribution.Distribution",
              "name": "distribution",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct DirectWithBidsAndAsksDistribution.DistributionOffer[]",
                  "name": "asks",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "index",
                      "type": "uint256"
                    },
                    {
                      "internalType": "Tick",
                      "name": "tick",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gives",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "struct DirectWithBidsAndAsksDistribution.DistributionOffer[]",
                  "name": "bids",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "index",
                      "type": "uint256"
                    },
                    {
                      "internalType": "Tick",
                      "name": "tick",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gives",
                      "type": "uint256"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "baseAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quoteAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "depositFunds"
        },
        {
          "inputs": [
            {
              "internalType": "enum OfferType",
              "name": "ba",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getOffer",
          "outputs": [
            {
              "internalType": "Offer",
              "name": "offer",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "enum OfferType",
              "name": "ba",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "indexOfOfferId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct MgvLib.SingleOrder",
              "name": "order",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct OLKey",
                  "name": "olKey",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "outbound_tkn",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "inbound_tkn",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tickSpacing",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "uint256",
                  "name": "offerId",
                  "type": "uint256"
                },
                {
                  "internalType": "Offer",
                  "name": "offer",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "takerWants",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "takerGives",
                  "type": "uint256"
                },
                {
                  "internalType": "OfferDetail",
                  "name": "offerDetail",
                  "type": "uint256"
                },
                {
                  "internalType": "Global",
                  "name": "global",
                  "type": "uint256"
                },
                {
                  "internalType": "Local",
                  "name": "local",
                  "type": "uint256"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "makerExecute",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "ret",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct MgvLib.SingleOrder",
              "name": "order",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct OLKey",
                  "name": "olKey",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "outbound_tkn",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "inbound_tkn",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tickSpacing",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "uint256",
                  "name": "offerId",
                  "type": "uint256"
                },
                {
                  "internalType": "Offer",
                  "name": "offer",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "takerWants",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "takerGives",
                  "type": "uint256"
                },
                {
                  "internalType": "OfferDetail",
                  "name": "offerDetail",
                  "type": "uint256"
                },
                {
                  "internalType": "Global",
                  "name": "global",
                  "type": "uint256"
                },
                {
                  "internalType": "Local",
                  "name": "local",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "struct MgvLib.OrderResult",
              "name": "result",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "makerData",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "mgvData",
                  "type": "bytes32"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "makerPosthook"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "reserveId",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "offerGasreq",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "offerGasreq",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "enum OfferType",
              "name": "ba",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "offerIdOfIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "enum OfferType",
              "name": "ba",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "offeredVolume",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "volume",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "params",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "gasprice",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "gasreq",
              "type": "uint24"
            },
            {
              "internalType": "uint88",
              "name": "stepSize",
              "type": "uint88"
            },
            {
              "internalType": "uint112",
              "name": "pricePoints",
              "type": "uint112"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "enum OfferType",
              "name": "ba",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "pending",
          "outputs": [
            {
              "internalType": "int256",
              "name": "",
              "type": "int256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct DirectWithBidsAndAsksDistribution.Distribution",
              "name": "distribution",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct DirectWithBidsAndAsksDistribution.DistributionOffer[]",
                  "name": "asks",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "index",
                      "type": "uint256"
                    },
                    {
                      "internalType": "Tick",
                      "name": "tick",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gives",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "struct DirectWithBidsAndAsksDistribution.DistributionOffer[]",
                  "name": "bids",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "index",
                      "type": "uint256"
                    },
                    {
                      "internalType": "Tick",
                      "name": "tick",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gives",
                      "type": "uint256"
                    }
                  ]
                }
              ]
            },
            {
              "internalType": "struct CoreKandel.Params",
              "name": "parameters",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "gasprice",
                  "type": "uint32"
                },
                {
                  "internalType": "uint24",
                  "name": "gasreq",
                  "type": "uint24"
                },
                {
                  "internalType": "uint88",
                  "name": "stepSize",
                  "type": "uint88"
                },
                {
                  "internalType": "uint112",
                  "name": "pricePoints",
                  "type": "uint112"
                }
              ]
            },
            {
              "internalType": "uint256",
              "name": "baseAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quoteAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "populate"
        },
        {
          "inputs": [
            {
              "internalType": "struct DirectWithBidsAndAsksDistribution.Distribution",
              "name": "distribution",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct DirectWithBidsAndAsksDistribution.DistributionOffer[]",
                  "name": "asks",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "index",
                      "type": "uint256"
                    },
                    {
                      "internalType": "Tick",
                      "name": "tick",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gives",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "struct DirectWithBidsAndAsksDistribution.DistributionOffer[]",
                  "name": "bids",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "index",
                      "type": "uint256"
                    },
                    {
                      "internalType": "Tick",
                      "name": "tick",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gives",
                      "type": "uint256"
                    }
                  ]
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "populateChunk"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "from",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "to",
              "type": "uint256"
            },
            {
              "internalType": "Tick",
              "name": "baseQuoteTickIndex0",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "firstAskIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bidGives",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "askGives",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "populateChunkFromOffset"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "from",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "to",
              "type": "uint256"
            },
            {
              "internalType": "Tick",
              "name": "baseQuoteTickIndex0",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "_baseQuoteTickOffset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "firstAskIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bidGives",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "askGives",
              "type": "uint256"
            },
            {
              "internalType": "struct CoreKandel.Params",
              "name": "parameters",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "gasprice",
                  "type": "uint32"
                },
                {
                  "internalType": "uint24",
                  "name": "gasreq",
                  "type": "uint24"
                },
                {
                  "internalType": "uint88",
                  "name": "stepSize",
                  "type": "uint88"
                },
                {
                  "internalType": "uint112",
                  "name": "pricePoints",
                  "type": "uint112"
                }
              ]
            },
            {
              "internalType": "uint256",
              "name": "baseAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quoteAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "populateFromOffset"
        },
        {
          "inputs": [
            {
              "internalType": "struct OLKey",
              "name": "olKey",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "outbound_tkn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "inbound_tkn",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tickSpacing",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "provisionOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "provision",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "enum OfferType",
              "name": "ba",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "reserveBalance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "from",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "to",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quoteAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "freeWei",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "retractAndWithdraw"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "from",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "to",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "retractOffers"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "router",
          "outputs": [
            {
              "internalType": "contract AbstractRouter",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "admin_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setAdmin"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_baseQuoteTickOffset",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setBaseQuoteTickOffset"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "gasprice",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setGasprice"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "gasreq",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setGasreq"
        },
        {
          "inputs": [
            {
              "internalType": "contract AbstractRouter",
              "name": "router_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRouter"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "stepSize",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setStepSize"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "receiver",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawFromMangrove"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "baseAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quoteAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawFunds"
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "activate(address[])": {
            "params": {
              "tokens": "the ERC20 `this` will approve to be able to trade on Mangrove's corresponding markets."
            }
          },
          "admin()": {
            "returns": {
              "current": "admin."
            }
          },
          "approve(address,address,uint256)": {
            "details": "admin may use this function to revoke specific approvals of `this` that are set after a call to `activate`.",
            "params": {
              "amount": "the spending amount",
              "spender": "the approved spender",
              "token": "the ERC20 token contract"
            },
            "returns": {
              "_0": "result of token approval."
            }
          },
          "checkList(address[])": {
            "details": "throws with a reason if something (e.g. an approval) is missing.",
            "params": {
              "tokens": "the list of tokens that are traded by this contract"
            }
          },
          "constructor": {
            "params": {
              "gasreq": "the gasreq to use for offers",
              "mgv": "The Mangrove deployment.",
              "olKeyBaseQuote": "The OLKey for the outbound_tkn base and inbound_tkn quote offer list Kandel will act on, the flipped OLKey is used for the opposite offer list.",
              "reserveId": "identifier of this contract's reserve when using a router."
            }
          },
          "createDistribution(uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256)": {
            "details": "the absolute price of an offer is the ratio of quote/base volumes of tokens it tradesthe tick of offers on Mangrove are in relative taker price of maker's inbound/outbound volumes of tokens it tradesfor Bids, outbound_tkn=quote, inbound_tkn=base so relative taker price of a a bid is the inverse of the absolute price.for Asks, outbound_tkn=base, inbound_tkn=quote so relative taker price of an ask coincides with absolute price.Index0 will contain the ask with the lowest relative price and the bid with the highest relative price. Absolute price is geometrically increasing over indexes.tickOffset moves an offer relative price s.t. `AskTick_{i+1} = AskTick_i + tickOffset` and `BidTick_{i+1} = BidTick_i - tickOffset`A hole is left in the middle at the size of stepSize - either an offer or its dual is posted, not both.The caller should make sure the minimum and maximum tick does not exceed the MIN_TICK and MAX_TICK from respectively; otherwise, populate will fail for those offers.If type(uint).max is used for `bidGives` or `askGives` then very high or low prices can yield gives=0 (which results in both offer an dual being dead) or gives>=type(uin96).max which is not supported by Mangrove.",
            "params": {
              "_baseQuoteTickOffset": "the tick offset used for the geometric progression deployment. Must be at least 1. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.",
              "askGives": "The initial amount of base to give for all asks. If 0, only book the offer, if type(uint).max then bidGives is used as quote for asks, and the base the ask gives is set to according to the price.",
              "baseQuoteTickIndex0": "the tick of base per quote for the price point at index 0. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.",
              "bidGives": "The initial amount of quote to give for all bids. If 0, only book the offer, if type(uint).max then askGives is used as base for bids, and the quote the bid gives is set to according to the price.",
              "firstAskIndex": "the (inclusive) index after which offer should be an ask. Must be at most `pricePoints`.",
              "from": "populate offers starting from this index (inclusive). Must be at most `pricePoints`.",
              "pricePoints": "the number of price points for the Kandel instance. Must be at least 2.",
              "stepSize": "in amount of price points to jump for posting dual offer. Must be less than `pricePoints`.",
              "to": "populate offers until this index (exclusive). Must be at most `pricePoints`."
            },
            "returns": {
              "distribution": "the distribution of bids and asks to populate"
            }
          },
          "depositFunds(uint256,uint256)": {
            "params": {
              "baseAmount": "the amount of base tokens to deposit.",
              "quoteAmount": "the amount of quote tokens to deposit."
            }
          },
          "getOffer(uint8,uint256)": {
            "params": {
              "ba": "the offer type.",
              "index": "the index."
            },
            "returns": {
              "offer": "the Mangrove offer."
            }
          },
          "indexOfOfferId(uint8,uint256)": {
            "params": {
              "ba": "the offer type",
              "offerId": "the Mangrove offer id."
            },
            "returns": {
              "index": "the index."
            }
          },
          "makerExecute(((address,address,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
            "details": "it may not be overriden although it can be customized using `__lastLook__`, `__put__` and `__get__` hooks. NB #1: if `makerExecute` reverts, the offer will be considered to be refusing the trade. NB #2: `makerExecute` may return a `bytes32` word to pass information to posthook w/o using storage reads/writes. NB #3: Reneging on trade will have the following effects: * Offer is removed from the Offer List * Offer bounty will be withdrawn from offer provision and sent to the offer taker. The remaining provision will be credited to `this` contract's account on Mangrove",
            "params": {
              "order": "a data structure that recapitulates the taker order and the offer as it was posted on mangrove"
            },
            "returns": {
              "ret": "a bytes32 word to pass information (if needed) to the posthook"
            }
          },
          "makerPosthook(((address,address,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bytes32,bytes32))": {
            "details": "It cannot be overridden but can be customized via the hooks `__posthookSuccess__`, `__posthookFallback__` and `__handleResidualProvision__` (see below).",
            "params": {
              "order": "a data structure that recapitulates the taker order and the offer as it was posted on mangrove",
              "result": "a data structure that gathers information about trade execution"
            }
          },
          "offerGasreq()": {
            "details": "call may revert if the strategy uses a reserveId or token dependant routing strategy and has no default",
            "returns": {
              "_0": "gas requirement for the default liquidity sourcing strategy"
            }
          },
          "offerGasreq(address,address)": {
            "params": {
              "reserveId": "passed to router to potentially specify a reserve specific routing strategy",
              "token": "passed to router to potentially specify a token specific routing strategy"
            },
            "returns": {
              "_0": "gas cost including router specific costs (if any)."
            }
          },
          "offerIdOfIndex(uint8,uint256)": {
            "params": {
              "ba": "the offer type",
              "index": "the index"
            },
            "returns": {
              "offerId": "the Mangrove offer id."
            }
          },
          "offeredVolume(uint8)": {
            "details": "function is very gas costly, for external calls only.",
            "params": {
              "ba": "offer type."
            },
            "returns": {
              "volume": "the total gives of all offers of the offer type."
            }
          },
          "pending(uint8)": {
            "details": "Gas costly function, better suited for off chain calls.",
            "params": {
              "ba": "offer type."
            },
            "returns": {
              "_0": "the pending amount"
            }
          },
          "populate(((uint256,int256,uint256)[],(uint256,int256,uint256)[]),(uint32,uint24,uint88,uint112),uint256,uint256)": {
            "details": "This function is used at initialization and can fund with provision for the offers.Use `populateChunk` to split up initialization or re-initialization with same parameters, as this function will emit.If this function is invoked with different pricePoints or stepSize, then first retract all offers.msg.value must be enough to provision all posted offers (for chunked initialization only one call needs to send native tokens).",
            "params": {
              "baseAmount": "base amount to deposit",
              "distribution": "the distribution of bids and asks to populate",
              "parameters": "the parameters for Kandel. Only changed parameters will cause updates. Set `gasreq` and `gasprice` to 0 to keep existing values.",
              "quoteAmount": "quote amount to deposit"
            }
          },
          "populateChunk(((uint256,int256,uint256)[],(uint256,int256,uint256)[]))": {
            "params": {
              "distribution": "the distribution of bids and asks to populate"
            }
          },
          "populateChunkFromOffset(uint256,uint256,int256,uint256,uint256,uint256)": {
            "details": "This is typically used after a call to `populateFromOffset` to populate the rest of the offers with the same parameters. See that function for further details.",
            "params": {
              "askGives": "The initial amount of base to give for all asks. If 0, only book the offer, if type(uint).max then bidGives is used as quote for asks, and the base the ask gives is set to according to the price.",
              "baseQuoteTickIndex0": "the tick of base per quote for the price point at index 0. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.",
              "bidGives": "The initial amount of quote to give for all bids. If 0, only book the offer, if type(uint).max then askGives is used as base for bids, and the quote the bid gives is set to according to the price.",
              "firstAskIndex": "the (inclusive) index after which offer should be an ask.",
              "from": "populate offers starting from this index (inclusive).",
              "to": "populate offers until this index (exclusive)."
            }
          },
          "populateFromOffset(uint256,uint256,int256,uint256,uint256,uint256,uint256,(uint32,uint24,uint88,uint112),uint256,uint256)": {
            "details": "See `createDistribution` for further details.",
            "params": {
              "_baseQuoteTickOffset": "the tick offset used for the geometric progression deployment. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.",
              "askGives": "The initial amount of base to give for all asks. If 0, only book the offer, if type(uint).max then bidGives is used as quote for asks, and the base the ask gives is set to according to the price.",
              "baseAmount": "base amount to deposit",
              "baseQuoteTickIndex0": "the tick of base per quote for the price point at index 0. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.",
              "bidGives": "The initial amount of quote to give for all bids. If 0, only book the offer, if type(uint).max then askGives is used as base for bids, and the quote the bid gives is set to according to the price.",
              "firstAskIndex": "the (inclusive) index after which offer should be an ask.",
              "from": "populate offers starting from this index (inclusive).",
              "parameters": "the parameters for Kandel. Only changed parameters will cause updates. Set `gasreq` and `gasprice` to 0 to keep existing values.",
              "quoteAmount": "quote amount to deposit",
              "to": "populate offers until this index (exclusive)."
            }
          },
          "provisionOf((address,address,uint256),uint256)": {
            "params": {
              "offerId": "the identifier of the offer in the offer list",
              "olKey": "the offer list key."
            },
            "returns": {
              "provision": "the amount of native tokens that can be redeemed when deprovisioning the offer"
            }
          },
          "reserveBalance(uint8)": {
            "params": {
              "ba": "the offer type."
            },
            "returns": {
              "balance": "the balance of the token."
            }
          },
          "retractAndWithdraw(uint256,uint256,uint256,uint256,uint256,address)": {
            "params": {
              "baseAmount": "the amount of base tokens to withdraw. Use type(uint).max to denote the entire reserve balance.",
              "freeWei": "the amount of wei to withdraw from Mangrove. Use type(uint).max to withdraw entire available balance.",
              "from": "retract offers starting from this index.",
              "quoteAmount": "the amount of quote tokens to withdraw. Use type(uint).max to denote the entire reserve balance.",
              "recipient": "the recipient of the funds.",
              "to": "retract offers until this index."
            }
          },
          "retractOffers(uint256,uint256)": {
            "details": "use in conjunction of `withdrawFromMangrove` if the user wishes to redeem the available WEIs.",
            "params": {
              "from": "the start index.",
              "to": "the end index."
            }
          },
          "router()": {
            "details": "if contract has a no router, function returns `NO_ROUTER`.",
            "returns": {
              "_0": "the router."
            }
          },
          "setAdmin(address)": {
            "params": {
              "admin_": "The new admin. Cannot be `address(0)`."
            }
          },
          "setBaseQuoteTickOffset(uint256)": {
            "params": {
              "_baseQuoteTickOffset": "the new tick offset."
            }
          },
          "setGasprice(uint256)": {
            "params": {
              "gasprice": "the gasprice."
            }
          },
          "setGasreq(uint256)": {
            "params": {
              "gasreq": "the gasreq."
            }
          },
          "setRouter(address)": {
            "details": "new router needs to be approved by `this` to push funds to reserve (see `activate` function). It also needs to be approved by reserve to pull from it.",
            "params": {
              "router_": "the new router contract that this contract should use. Use `NO_ROUTER` for no router."
            }
          },
          "setStepSize(uint256)": {
            "params": {
              "stepSize": "the step size."
            }
          },
          "withdrawFromMangrove(uint256,address)": {
            "details": "Since a call is made to the `receiver`, this function is subject to reentrancy.",
            "params": {
              "amount": "the amount of WEI one wishes to withdraw.",
              "receiver": "the address of the receiver of the funds."
            }
          },
          "withdrawFunds(uint256,uint256,address)": {
            "details": "it is up to the caller to make sure there are still enough funds for live offers.",
            "params": {
              "baseAmount": "the amount of base tokens to withdraw. Use type(uint).max to denote the entire reserve balance.",
              "quoteAmount": "the amount of quote tokens to withdraw. Use type(uint).max to denote the entire reserve balance.",
              "recipient": "the address to which the withdrawn funds should be sent to."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "BASE()": {
            "notice": "base of the market Kandel is making"
          },
          "CONSTANT_GASREQ()": {
            "notice": "Gas requirement when posting offers via this strategy, excluding router requirement."
          },
          "MGV()": {
            "notice": "The Mangrove deployment that is allowed to call `this` for trade execution and posthook."
          },
          "NO_ROUTER()": {
            "notice": "constant for no router"
          },
          "QUOTE()": {
            "notice": "quote of the market Kandel is making"
          },
          "RESERVE_ID()": {
            "notice": "identifier of this contract's reserve when using a router"
          },
          "TICK_SPACING()": {
            "notice": "tickSpacing of the market Kandel is making"
          },
          "activate(address[])": {
            "notice": "performs the required approvals so as to allow `this` to interact with Mangrove on a set of assets."
          },
          "admin()": {
            "notice": "Retrieves the current admin."
          },
          "approve(address,address,uint256)": {
            "notice": "Approves a spender to transfer a certain amount of tokens on behalf of `this`."
          },
          "baseQuoteTickOffset()": {
            "notice": "The tick offset for absolute price used for the on-chain geometric progression deployment in `createDistribution`. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding."
          },
          "checkList(address[])": {
            "notice": "verifies that Mangrove is allowed to pull tokens from this contract."
          },
          "constructor": {
            "notice": "Constructor"
          },
          "createDistribution(uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256)": {
            "notice": "Creates a distribution of bids and asks given by the parameters. Dual offers are included with gives=0."
          },
          "depositFunds(uint256,uint256)": {
            "notice": "Deposits funds to the contract's reserve"
          },
          "getOffer(uint8,uint256)": {
            "notice": "gets the Mangrove offer at the given index for the offer type."
          },
          "indexOfOfferId(uint8,uint256)": {
            "notice": "Maps an offer type and Mangrove offer id to index."
          },
          "makerExecute(((address,address,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
            "notice": "`makerExecute` is the callback function to execute all offers that were posted on Mangrove by `this` contract."
          },
          "makerPosthook(((address,address,uint256),uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bytes32,bytes32))": {
            "notice": "`makerPosthook` is the callback function that is called by Mangrove *after* the offer execution.reverting during its execution will not renege on trade. Revert reason (casted to 32 bytes) is then logged by Mangrove in event `PosthookFail`."
          },
          "offerGasreq()": {
            "notice": "offerGasreq for the default route"
          },
          "offerGasreq(address,address)": {
            "notice": "Actual gas requirement when posting offers via this strategy. Returned value may change if this contract's router is updated."
          },
          "offerIdOfIndex(uint8,uint256)": {
            "notice": "maps index of offers to offer id on Mangrove."
          },
          "offeredVolume(uint8)": {
            "notice": "gets the total gives of all offers of the offer type."
          },
          "params()": {
            "notice": "Storage of the parameters for the strat."
          },
          "pending(uint8)": {
            "notice": "gets pending liquidity for base (ask) or quote (bid). Will be negative if funds are not enough to cover all offer's promises."
          },
          "populate(((uint256,int256,uint256)[],(uint256,int256,uint256)[]),(uint32,uint24,uint88,uint112),uint256,uint256)": {
            "notice": "publishes bids/asks for the distribution in the `indices`. Care must be taken to publish offers in meaningful chunks. For Kandel an offer and its dual should be published in the same chunk (one being optionally initially dead)."
          },
          "populateChunk(((uint256,int256,uint256)[],(uint256,int256,uint256)[]))": {
            "notice": "Publishes bids/asks for the distribution in the `indices`. Care must be taken to publish offers in meaningful chunks. For Kandel an offer and its dual should be published in the same chunk (one being optionally initially dead).This function is used externally after `populate` to reinitialize some indices or if multiple transactions are needed to split initialization due to gas cost.This function is not payable, use `populate` to fund along with populate."
          },
          "populateChunkFromOffset(uint256,uint256,int256,uint256,uint256,uint256)": {
            "notice": "publishes bids/asks according to a geometric distribution, and reads parameters from the Kandel instance."
          },
          "populateFromOffset(uint256,uint256,int256,uint256,uint256,uint256,uint256,(uint32,uint24,uint88,uint112),uint256,uint256)": {
            "notice": "publishes bids/asks according to a geometric distribution, and sets all parameters according to inputs."
          },
          "provisionOf((address,address,uint256),uint256)": {
            "notice": "computes the amount of native tokens that can be redeemed when deprovisioning a given offer."
          },
          "reserveBalance(uint8)": {
            "notice": "the total balance available for the strat of the offered token for the given offer type."
          },
          "retractAndWithdraw(uint256,uint256,uint256,uint256,uint256,address)": {
            "notice": "Retracts offers, withdraws funds, and withdraws free wei from Mangrove."
          },
          "retractOffers(uint256,uint256)": {
            "notice": "retracts and deprovisions offers of the distribution interval `[from, to[`."
          },
          "router()": {
            "notice": "Contract's router getter."
          },
          "setAdmin(address)": {
            "notice": "This sets the admin. Only the current admin can change the admin."
          },
          "setBaseQuoteTickOffset(uint256)": {
            "notice": "sets the tick offset if different from existing."
          },
          "setGasprice(uint256)": {
            "notice": "sets the gasprice for offers"
          },
          "setGasreq(uint256)": {
            "notice": "sets the gasreq (including router's gasreq) for offers"
          },
          "setRouter(address)": {
            "notice": "sets a new router to pull outbound tokens from contract's reserve to `this` and push inbound tokens to reserve."
          },
          "setStepSize(uint256)": {
            "notice": "sets the step size"
          },
          "withdrawFromMangrove(uint256,address)": {
            "notice": "withdraws native tokens from `this` balance on Mangrove."
          },
          "withdrawFunds(uint256,uint256,address)": {
            "notice": "withdraws funds from the contract's reserve"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@mgv-strats/lib/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/lib/",
        "@mgv-strats/script/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/script/",
        "@mgv-strats/src/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/",
        "@mgv-strats/test/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/test/",
        "@mgv/forge-std/=node_modules/@mangrovedao/mangrove-core/lib/forge-std/src/",
        "@mgv/lib/=node_modules/@mangrovedao/mangrove-core/lib/",
        "@mgv/script/=node_modules/@mangrovedao/mangrove-core/script/",
        "@mgv/src/=node_modules/@mangrovedao/mangrove-core/src/",
        "@mgv/test/=node_modules/@mangrovedao/mangrove-core/test/",
        "ds-test/=node_modules/@mangrovedao/mangrove-core/lib/forge-std/lib/ds-test/src/",
        "mgv_arbitrage_lib/=mangrove-arbitrage/lib/",
        "mgv_arbitrage_script/=mangrove-arbitrage/script/",
        "mgv_arbitrage_src/=mangrove-arbitrage/src/",
        "mgv_arbitrage_test/=mangrove-arbitrage/test/",
        "mgv_forge-std/=node_modules/@mangrovedao/mangrove-core/lib/forge-std/src/",
        "mgv_lib/=node_modules/@mangrovedao/mangrove-core/lib/",
        "mgv_script/=node_modules/@mangrovedao/mangrove-core/script/",
        "mgv_src/=node_modules/@mangrovedao/mangrove-core/src/",
        "mgv_strats_lib/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/lib/",
        "mgv_strats_script/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/script/",
        "mgv_strats_src/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/",
        "mgv_strats_test/=node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/test/",
        "mgv_test/=node_modules/@mangrovedao/mangrove-core/test/",
        "uniswap_v3_lib/=mangrove-arbitrage/lib/v3-core/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/GeometricKandel.sol": "GeometricKandel"
      },
      "libraries": {}
    },
    "sources": {
      "node_modules/@mangrovedao/mangrove-core/lib/IERC20.sol": {
        "keccak256": "0xe39ef15ad326909ca8b85ee0a6d571798c4155b1d83591ab127badb082628240",
        "urls": [
          "bzz-raw://1cb5cd93f7152410db9b23c18e515e984c65f047d586b901c1031e38507ffe49",
          "dweb:/ipfs/QmYRNEH8XHRq1zSbpXa8NpYKBVJZWVTj211Viz7FbMRrU6"
        ],
        "license": "Unlicense"
      },
      "node_modules/@mangrovedao/mangrove-core/lib/TransferLib.sol": {
        "keccak256": "0x3a8b94d6cc226852fefada57b74fe8cb4f3e34bdcf0860825401a57097d7914b",
        "urls": [
          "bzz-raw://a7293b7722734c714f12fa51520c2ebf01776ca5f837c06ca27a7c775e4bf579",
          "dweb:/ipfs/QmTFm7NaHGv32fYoXbiUiMSgpWAJ5GfHoV1LTD49ZfkCpJ"
        ],
        "license": "BSD-2-Clause"
      },
      "node_modules/@mangrovedao/mangrove-core/lib/core/BitLib.sol": {
        "keccak256": "0x5a1c56d67fbd2ef6f3b830cf8dae1885da5f40a37afd11cb3a392be573993c3b",
        "urls": [
          "bzz-raw://a07b895de906f49d0ce9e89a349d39220e13039709ea2e2db46ff48310bd4b3b",
          "dweb:/ipfs/QmZyiLKyTZ9EHwqNRUYukQDdg7CL54Dsu65RYabkkGF1KM"
        ],
        "license": "MIT"
      },
      "node_modules/@mangrovedao/mangrove-core/lib/core/Constants.sol": {
        "keccak256": "0xc379ed5c15639ff1f4461872ff53bacaf01372264937032854c4c549056b0b87",
        "urls": [
          "bzz-raw://6b3ef408068d112fb1a70a880d8be678414415c76d50c675349c7c09186b3deb",
          "dweb:/ipfs/QmUhfhByzQMLFSL6ZvkggetVtRaYpLRpzs3KZJDmNhT22f"
        ],
        "license": "BUSL-1.1"
      },
      "node_modules/@mangrovedao/mangrove-core/lib/core/DensityLib.sol": {
        "keccak256": "0xc7ee8be7f11a1bf85aa4ea0e222d4a49d77a378b201e347f9a5e4f28f207a023",
        "urls": [
          "bzz-raw://ed718e8bf3fb45bc0e7cf739662422cfe01d8d04a2c99b2fb0cfa2372629c6ad",
          "dweb:/ipfs/QmZ5QpyMSmkVxayfpZYovNcc8NGJKfVZEMKphzeKk9cVNv"
        ],
        "license": "MIT"
      },
      "node_modules/@mangrovedao/mangrove-core/lib/core/LocalExtra.sol": {
        "keccak256": "0xbd3f6702242dd43ba2493eb54feb8f5d2526967512c6f156d29669b54d9c60f2",
        "urls": [
          "bzz-raw://e389f3c78c8073bde973aa3f4770139e2adb4cc00cc1303b77eefa201189a6ff",
          "dweb:/ipfs/QmZ8vXRUUCinKtqJhV7jMXVeDVfRizhJ3NsumZLQxwSc44"
        ],
        "license": "Unlicense"
      },
      "node_modules/@mangrovedao/mangrove-core/lib/core/OfferDetailExtra.sol": {
        "keccak256": "0x335217debbf3f4cabeaea88d4dd9777dbda2f2b6ed9684e2285a4d16e1e4464c",
        "urls": [
          "bzz-raw://eafe358531d7dc6527d36f8fbc4bc67ab12516398c35338ba5da57a03e24b9f3",
          "dweb:/ipfs/QmcKxrcr11EM7rsKNUEJq8VXFd2R1dWSTqYk3E4k8dQfzy"
        ],
        "license": "Unlicense"
      },
      "node_modules/@mangrovedao/mangrove-core/lib/core/OfferExtra.sol": {
        "keccak256": "0x95120d52698bc60b005496036a7c9daa7b8d0b18b571e596e86fd696b36e3264",
        "urls": [
          "bzz-raw://684d30cc9673403cfddabdf7d979417c5df050abde16712aeaa9ca6b2725d154",
          "dweb:/ipfs/QmTkeUAMhb72BNqGjAaaPBj1NHPtKE8wH1R8bpXD5RTKtC"
        ],
        "license": "Unlicense"
      },
      "node_modules/@mangrovedao/mangrove-core/lib/core/TickLib.sol": {
        "keccak256": "0xa4aea464925ad277aab2141885eeeb6e5f1b0963ba08d8887a1c2461c334f222",
        "urls": [
          "bzz-raw://c7ec62c85c22d7996abe32663232861f90e855c770dbd252bf49fff4ca786e74",
          "dweb:/ipfs/QmSHBJfw9bg8QjgBquXVLTS337ZuBGHVkDJfwuAZ6X48sw"
        ],
        "license": "BUSL-1.1"
      },
      "node_modules/@mangrovedao/mangrove-core/lib/core/TickTreeLib.sol": {
        "keccak256": "0x196c46d6e8e2ab51462f25245f7886568df3f1f65953dcec4c02d7950b4a10cd",
        "urls": [
          "bzz-raw://4293ed5fb3ce4d350b9bb5b38342c273e6d772ace098927e006efa7fc4498329",
          "dweb:/ipfs/QmRCtk481PHQjNdt5Dsa8GYWEX46nYwdeD8R3m92w3Xjxv"
        ],
        "license": "BUSL-1.1"
      },
      "node_modules/@mangrovedao/mangrove-core/lib/forge-std/src/console2.sol": {
        "keccak256": "0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea",
        "urls": [
          "bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973",
          "dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF"
        ],
        "license": "MIT"
      },
      "node_modules/@mangrovedao/mangrove-core/src/IMangrove.sol": {
        "keccak256": "0x7bb6985efa88b71ec161df4e3b6a7b27e32ccae0890c730f25a0c7f1c5e46c0b",
        "urls": [
          "bzz-raw://4aaf49678b6cce3cb69ba3d1effe0cab9a8b37cbdd9d462c99cd6bd0679fa3ce",
          "dweb:/ipfs/QmUCby1BEr1oQtFCq4eDECiv3qrpofG7pUPTmP1GCoQc2q"
        ],
        "license": "Unlicense"
      },
      "node_modules/@mangrovedao/mangrove-core/src/core/MgvLib.sol": {
        "keccak256": "0xe22e3d452040625724ce932cc6f57212c8a32ba021b06f5737e4c23319792c7d",
        "urls": [
          "bzz-raw://b3ab9e3726b49b2d526f1cb6634c562cbafdbc1163753d13a3e1c316ca29e726",
          "dweb:/ipfs/QmS9bYtEVW7i9zAWmC7aPdCDv4BCaBJbhpgrJX6VhH68st"
        ],
        "license": "Unlicense"
      },
      "node_modules/@mangrovedao/mangrove-core/src/preprocessed/Global.post.sol": {
        "keccak256": "0xddf04a10f84edc0b165351f649cad761a429b5c1b218e482917b3e38a2019e7f",
        "urls": [
          "bzz-raw://7695a94afb1db46a65967bd63fc344b0a9387a4a2c906fdcac0433fdfec32dff",
          "dweb:/ipfs/QmcH4k6VwPrSEjqEQVsKTRjxWtmhijoknih6s6R98dnNUM"
        ],
        "license": "Unlicense"
      },
      "node_modules/@mangrovedao/mangrove-core/src/preprocessed/Local.post.sol": {
        "keccak256": "0x03d642742c132c37c1fc29cae87f7ce1be93f89877fe698698d5bd2309c878a5",
        "urls": [
          "bzz-raw://6957d461c6486caeee91f5fd8be2ff0f53a8c264c03e8c9b7f7291bf7a72d9fc",
          "dweb:/ipfs/QmTRqHsnjFA1xDmWWuPqn9aPeweRiYHv1wfTz77qxCmd7k"
        ],
        "license": "Unlicense"
      },
      "node_modules/@mangrovedao/mangrove-core/src/preprocessed/Offer.post.sol": {
        "keccak256": "0x812a7c313108b56600f747d89d20b2daa4c4aa489ece1b30c561a353d41468f2",
        "urls": [
          "bzz-raw://3fb1685a67020adeece9f6fbf567567d257aafafd2e115e6151f2b2a14b429aa",
          "dweb:/ipfs/QmUvk3FLDDHRXungxeLtPEfaQj3HNt3ib8nGhonzPdMW6o"
        ],
        "license": "Unlicense"
      },
      "node_modules/@mangrovedao/mangrove-core/src/preprocessed/OfferDetail.post.sol": {
        "keccak256": "0xbb0c9e3177017a77de68adeed5cbbf040fc9152f914adb34575eb880979fc720",
        "urls": [
          "bzz-raw://fac448393a94f7d797f58ece51c1127a1605397b2371c9d1fe61db0037762a91",
          "dweb:/ipfs/QmUwcWdecdqa81eLGz4SekQYfiTp5pgs2mvFRYmu7T2sew"
        ],
        "license": "Unlicense"
      },
      "node_modules/@mangrovedao/mangrove-core/src/preprocessed/Structs.post.sol": {
        "keccak256": "0x6121b0f392dbeddf77da4f5bc5dee019878ab21538892bd22dbb9c49e9e068bb",
        "urls": [
          "bzz-raw://336a0df7a17dd6b1ed36c4e7f19fc9ab6d4ad933f7e0b3658efba0756c7341bc",
          "dweb:/ipfs/QmZ7NQY6EJHqcE1oEho1yN9ymsTfVpUcMJABKC8Fq5GvhL"
        ],
        "license": "Unlicense"
      },
      "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/MangroveOffer.sol": {
        "keccak256": "0x789a104578f14acad6b783c9d2a154f9a8749fde35706af5d69361cd14a9e6be",
        "urls": [
          "bzz-raw://5c00fbc42821d1c0c293286c5571d6c32ff64104ab49789f95a59d20e9f6aba8",
          "dweb:/ipfs/QmR3LEBX5UJzxKM3DH8T3uVRVRgmDHkE7B9e2MMDjgokbA"
        ],
        "license": "BSD-2-Clause"
      },
      "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/interfaces/IOfferLogic.sol": {
        "keccak256": "0xe768d5ae2ad8cebe4aa8919230ff0bda5e306b876a4a9f50a0710c02656a3809",
        "urls": [
          "bzz-raw://e4230bc3c1d39f243f1e6546b1f715d89887f2572a0aec73eda11c3f2a18bdd1",
          "dweb:/ipfs/QmbUaWNuY6R93ku6tiTkSUw5p9riZT2vQiMLmcb3xSRYBh"
        ],
        "license": "BSD-2-Clause"
      },
      "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/abstract/Direct.sol": {
        "keccak256": "0xe925cb9996d0896123ea908cfe1d494a3ee1d24b4db19fc43c29975801568cc2",
        "urls": [
          "bzz-raw://a1f168082fcfc7672d9cce557440efe97b2bf95bc8f792d1754da963583bd672",
          "dweb:/ipfs/QmPuuAY4CDMcQEWKbJezNCazfX2g748Q3hX3ejCWYh4YVC"
        ],
        "license": "BSD-2-Clause"
      },
      "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/CoreKandel.sol": {
        "keccak256": "0x95a35ccefbafb8a79832f312b8fea6d3b84933521391c1396eb410a852e6bffd",
        "urls": [
          "bzz-raw://52c938e85d2d3227845345776977dbc6cd53fc27023f0decc08c66acab6d1518",
          "dweb:/ipfs/QmcSu24Udjh8nTy7VwzTjoLKmAUXfJXAv1jKbaD7PGvZiY"
        ],
        "license": "BSD-2-Clause"
      },
      "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/DirectWithBidsAndAsksDistribution.sol": {
        "keccak256": "0x6e424c8168ba612e53100f47ed27d73d2702d11a8ebee291944b6508f87df3c1",
        "urls": [
          "bzz-raw://6d71dc3b59c99071a5240764290f866a32f7114bf1c57a3d36c5ccc46f24544f",
          "dweb:/ipfs/QmRfe1i9751BfLiyWE9JpHJP6pxXzPvUWQMhiEj1qhbait"
        ],
        "license": "BSD-2-Clause"
      },
      "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/GeometricKandel.sol": {
        "keccak256": "0x49bf32ef326950c199d8dc7aad069779696d2aa54a6aeb65924c68fe2c93956b",
        "urls": [
          "bzz-raw://450bf42af8faa7f56d8102436f778ef2c3c9b91d80f21f742de78bf3de7b842b",
          "dweb:/ipfs/QmfFguoZ5wFcptVY7fXj7XHG68Eu7XNMum9GxMogz4Fo75"
        ],
        "license": "BSD-2-Clause"
      },
      "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/HasIndexedBidsAndAsks.sol": {
        "keccak256": "0xfb0f5e7bb82b3f7c32b05f404deeb56dcad54d61952b8b0126af006456228c09",
        "urls": [
          "bzz-raw://a83d4d9d0ffa6334e8ebaf2e8f3fadc4666348fe5e0da2b825630456c3316510",
          "dweb:/ipfs/QmTPYLRvhf6PTBDbFfBrjSxekvz9fPcfzaK8sKgZCazKb3"
        ],
        "license": "BSD-2-Clause"
      },
      "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/KandelLib.sol": {
        "keccak256": "0x58ff44666d4294134a998683f3ab26d5af8d722e299f794d5b928c8cf0fe134c",
        "urls": [
          "bzz-raw://7e5d9eb5c0ce7ed0e80f628289c785d81c16bdfe33d0c17aef333798820bac7b",
          "dweb:/ipfs/QmQ5VpGVx4XhpxZocQs7wFZMhV3SFoCf4xBCN7z86qiEGA"
        ],
        "license": "BSD-2-Clause"
      },
      "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/TradesBaseQuotePair.sol": {
        "keccak256": "0x2891ec6af9a40dffeff023e5baed8f3be28b88a4a8c1bb8c6296ead493398eaa",
        "urls": [
          "bzz-raw://6e2b1f6a8411d23b7414866915dfe37f29aad66a9ffabae066d0d03ae0213bcd",
          "dweb:/ipfs/QmVYfbQfHqhzZnge33o92LTRPHpkGTxkv26GiMsJb3wd5N"
        ],
        "license": "BSD-2-Clause"
      },
      "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/routers/abstract/AbstractRouter.sol": {
        "keccak256": "0xee7f240b669dbba8d3d90af4a0e910346a9f6ce2787400fcbad800b978cabecb",
        "urls": [
          "bzz-raw://762dec2ea258c2132e10012a95d8724802fb7eb67227dfc6e11da703035cd449",
          "dweb:/ipfs/QmaKxQacNfT7obLdoW9EkT1XeN5d7p1YdfcnD8fruDhBF8"
        ],
        "license": "BSD-2-Clause"
      },
      "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/utils/AccessControlled.sol": {
        "keccak256": "0x05d5cdef0cd8133ac3d451c81ec8e4d8253eed5f1313d2c2b60385a7cefc845a",
        "urls": [
          "bzz-raw://7ef36b8d3f38b47a6062aa04667320aee663630fbd3626569d1928abc2e63f07",
          "dweb:/ipfs/QmUJKfJeswYvHCujVARh3axWZEAsknNoyxNndgv2cj1EXt"
        ],
        "license": "BSD-2-Clause"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/GeometricKandel.sol",
    "id": 87284,
    "exportedSymbols": {
      "CoreKandel": [
        86559
      ],
      "GeometricKandel": [
        87283
      ],
      "IMangrove": [
        54127
      ],
      "KandelLib": [
        87900
      ],
      "MAX_TICK": [
        4415
      ],
      "MIN_TICK": [
        4412
      ],
      "OLKey": [
        55875
      ],
      "Tick": [
        5280
      ]
    },
    "nodeType": "SourceUnit",
    "src": "41:9194:114",
    "nodes": [
      {
        "id": 87050,
        "nodeType": "PragmaDirective",
        "src": "41:24:114",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".10"
        ]
      },
      {
        "id": 87052,
        "nodeType": "ImportDirective",
        "src": "67:49:114",
        "nodes": [],
        "absolutePath": "node_modules/@mangrovedao/mangrove-core/src/IMangrove.sol",
        "file": "@mgv/src/IMangrove.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 87284,
        "sourceUnit": 54128,
        "symbolAliases": [
          {
            "foreign": {
              "id": 87051,
              "name": "IMangrove",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 54127,
              "src": "75:9:114",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 87054,
        "nodeType": "ImportDirective",
        "src": "117:44:114",
        "nodes": [],
        "absolutePath": "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/CoreKandel.sol",
        "file": "./CoreKandel.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 87284,
        "sourceUnit": 86560,
        "symbolAliases": [
          {
            "foreign": {
              "id": 87053,
              "name": "CoreKandel",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 86559,
              "src": "125:10:114",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 87057,
        "nodeType": "ImportDirective",
        "src": "162:63:114",
        "nodes": [],
        "absolutePath": "node_modules/@mangrovedao/mangrove-core/lib/core/Constants.sol",
        "file": "@mgv/lib/core/Constants.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 87284,
        "sourceUnit": 4449,
        "symbolAliases": [
          {
            "foreign": {
              "id": 87055,
              "name": "MAX_TICK",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 4415,
              "src": "170:8:114",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 87056,
              "name": "MIN_TICK",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 4412,
              "src": "180:8:114",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 87059,
        "nodeType": "ImportDirective",
        "src": "226:47:114",
        "nodes": [],
        "absolutePath": "node_modules/@mangrovedao/mangrove-core/src/core/MgvLib.sol",
        "file": "@mgv/src/core/MgvLib.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 87284,
        "sourceUnit": 56240,
        "symbolAliases": [
          {
            "foreign": {
              "id": 87058,
              "name": "OLKey",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 55875,
              "src": "234:5:114",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 87061,
        "nodeType": "ImportDirective",
        "src": "274:42:114",
        "nodes": [],
        "absolutePath": "node_modules/@mangrovedao/mangrove.js/node_modules/@mangrovedao/mangrove-strats/src/strategies/offer_maker/market_making/kandel/abstract/KandelLib.sol",
        "file": "./KandelLib.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 87284,
        "sourceUnit": 87901,
        "symbolAliases": [
          {
            "foreign": {
              "id": 87060,
              "name": "KandelLib",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 87900,
              "src": "282:9:114",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 87063,
        "nodeType": "ImportDirective",
        "src": "317:47:114",
        "nodes": [],
        "absolutePath": "node_modules/@mangrovedao/mangrove-core/lib/core/TickLib.sol",
        "file": "@mgv/lib/core/TickLib.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 87284,
        "sourceUnit": 6402,
        "symbolAliases": [
          {
            "foreign": {
              "id": 87062,
              "name": "Tick",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5280,
              "src": "325:4:114",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 87283,
        "nodeType": "ContractDefinition",
        "src": "487:8747:114",
        "nodes": [
          {
            "id": 87071,
            "nodeType": "EventDefinition",
            "src": "798:41:114",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 87067,
              "nodeType": "StructuredDocumentation",
              "src": "539:256:114",
              "text": "@notice The tick offset for absolute price used for the on-chain geometric progression deployment in `createDistribution`. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.\n@param value the tick offset."
            },
            "eventSelector": "286da08673f0eb4b3843f2824fb8e3e412534a62f6094fdc8b4008cfeba4ba66",
            "name": "SetBaseQuoteTickOffset",
            "nameLocation": "804:22:114",
            "parameters": {
              "id": 87070,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 87069,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "832:5:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87071,
                  "src": "827:10:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87068,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "827:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "826:12:114"
            }
          },
          {
            "id": 87074,
            "nodeType": "VariableDeclaration",
            "src": "1205:31:114",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 87072,
              "nodeType": "StructuredDocumentation",
              "src": "981:221:114",
              "text": "@notice The tick offset for absolute price used for the on-chain geometric progression deployment in `createDistribution`. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding."
            },
            "functionSelector": "14ee02bd",
            "mutability": "mutable",
            "name": "baseQuoteTickOffset",
            "nameLocation": "1217:19:114",
            "scope": 87283,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 87073,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "1205:4:114",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "id": 87095,
            "nodeType": "FunctionDefinition",
            "src": "1607:147:114",
            "nodes": [],
            "body": {
              "id": 87094,
              "nodeType": "Block",
              "src": "1752:2:114",
              "nodes": [],
              "statements": []
            },
            "documentation": {
              "id": 87075,
              "nodeType": "StructuredDocumentation",
              "src": "1241:363:114",
              "text": "@notice Constructor\n@param mgv The Mangrove deployment.\n@param olKeyBaseQuote The OLKey for the outbound_tkn base and inbound_tkn quote offer list Kandel will act on, the flipped OLKey is used for the opposite offer list.\n@param gasreq the gasreq to use for offers\n@param reserveId identifier of this contract's reserve when using a router."
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 87088,
                    "name": "mgv",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 87078,
                    "src": "1710:3:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IMangrove_$54127",
                      "typeString": "contract IMangrove"
                    }
                  },
                  {
                    "id": 87089,
                    "name": "olKeyBaseQuote",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 87081,
                    "src": "1715:14:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_OLKey_$55875_memory_ptr",
                      "typeString": "struct OLKey memory"
                    }
                  },
                  {
                    "id": 87090,
                    "name": "gasreq",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 87083,
                    "src": "1731:6:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "id": 87091,
                    "name": "reserveId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 87085,
                    "src": "1739:9:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 87092,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 87087,
                  "name": "CoreKandel",
                  "nameLocations": [
                    "1699:10:114"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 86559,
                  "src": "1699:10:114"
                },
                "nodeType": "ModifierInvocation",
                "src": "1699:50:114"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 87086,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 87078,
                  "mutability": "mutable",
                  "name": "mgv",
                  "nameLocation": "1629:3:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87095,
                  "src": "1619:13:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IMangrove_$54127",
                    "typeString": "contract IMangrove"
                  },
                  "typeName": {
                    "id": 87077,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 87076,
                      "name": "IMangrove",
                      "nameLocations": [
                        "1619:9:114"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 54127,
                      "src": "1619:9:114"
                    },
                    "referencedDeclaration": 54127,
                    "src": "1619:9:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IMangrove_$54127",
                      "typeString": "contract IMangrove"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87081,
                  "mutability": "mutable",
                  "name": "olKeyBaseQuote",
                  "nameLocation": "1647:14:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87095,
                  "src": "1634:27:114",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_OLKey_$55875_memory_ptr",
                    "typeString": "struct OLKey"
                  },
                  "typeName": {
                    "id": 87080,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 87079,
                      "name": "OLKey",
                      "nameLocations": [
                        "1634:5:114"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 55875,
                      "src": "1634:5:114"
                    },
                    "referencedDeclaration": 55875,
                    "src": "1634:5:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_OLKey_$55875_storage_ptr",
                      "typeString": "struct OLKey"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87083,
                  "mutability": "mutable",
                  "name": "gasreq",
                  "nameLocation": "1668:6:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87095,
                  "src": "1663:11:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87082,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1663:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87085,
                  "mutability": "mutable",
                  "name": "reserveId",
                  "nameLocation": "1684:9:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87095,
                  "src": "1676:17:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 87084,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1676:7:114",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1618:76:114"
            },
            "returnParameters": {
              "id": 87093,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1752:0:114"
            },
            "scope": 87283,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 87127,
            "nodeType": "FunctionDefinition",
            "src": "1874:344:114",
            "nodes": [],
            "body": {
              "id": 87126,
              "nodeType": "Block",
              "src": "1950:268:114",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 87109,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 87106,
                              "name": "_baseQuoteTickOffset",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 87098,
                              "src": "1971:20:114",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 87105,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1964:6:114",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint24_$",
                              "typeString": "type(uint24)"
                            },
                            "typeName": {
                              "id": 87104,
                              "name": "uint24",
                              "nodeType": "ElementaryTypeName",
                              "src": "1964:6:114",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 87107,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1964:28:114",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint24",
                            "typeString": "uint24"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 87108,
                          "name": "_baseQuoteTickOffset",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 87098,
                          "src": "1996:20:114",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1964:52:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4b616e64656c2f7469636b4f6666736574546f6f48696768",
                        "id": 87110,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2018:26:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4c10aba3e7df5614717eb8abfd6e9345fd4da2f95ecd415b815d3d3042dc6bc7",
                          "typeString": "literal_string \"Kandel/tickOffsetTooHigh\""
                        },
                        "value": "Kandel/tickOffsetTooHigh"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4c10aba3e7df5614717eb8abfd6e9345fd4da2f95ecd415b815d3d3042dc6bc7",
                          "typeString": "literal_string \"Kandel/tickOffsetTooHigh\""
                        }
                      ],
                      "id": 87103,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1956:7:114",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 87111,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1956:89:114",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 87112,
                  "nodeType": "ExpressionStatement",
                  "src": "1956:89:114"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 87115,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 87113,
                      "name": "baseQuoteTickOffset",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 87074,
                      "src": "2055:19:114",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "id": 87114,
                      "name": "_baseQuoteTickOffset",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 87098,
                      "src": "2078:20:114",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2055:43:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 87125,
                  "nodeType": "IfStatement",
                  "src": "2051:163:114",
                  "trueBody": {
                    "id": 87124,
                    "nodeType": "Block",
                    "src": "2100:114:114",
                    "statements": [
                      {
                        "expression": {
                          "id": 87118,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 87116,
                            "name": "baseQuoteTickOffset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 87074,
                            "src": "2108:19:114",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 87117,
                            "name": "_baseQuoteTickOffset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 87098,
                            "src": "2130:20:114",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2108:42:114",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 87119,
                        "nodeType": "ExpressionStatement",
                        "src": "2108:42:114"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 87121,
                              "name": "_baseQuoteTickOffset",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 87098,
                              "src": "2186:20:114",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 87120,
                            "name": "SetBaseQuoteTickOffset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 87071,
                            "src": "2163:22:114",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 87122,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2163:44:114",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 87123,
                        "nodeType": "EmitStatement",
                        "src": "2158:49:114"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 87096,
              "nodeType": "StructuredDocumentation",
              "src": "1758:113:114",
              "text": "@notice sets the tick offset if different from existing.\n@param _baseQuoteTickOffset the new tick offset."
            },
            "functionSelector": "a224b5e9",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 87101,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 87100,
                  "name": "onlyAdmin",
                  "nameLocations": [
                    "1940:9:114"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 89769,
                  "src": "1940:9:114"
                },
                "nodeType": "ModifierInvocation",
                "src": "1940:9:114"
              }
            ],
            "name": "setBaseQuoteTickOffset",
            "nameLocation": "1883:22:114",
            "parameters": {
              "id": 87099,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 87098,
                  "mutability": "mutable",
                  "name": "_baseQuoteTickOffset",
                  "nameLocation": "1911:20:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87127,
                  "src": "1906:25:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87097,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1906:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1905:27:114"
            },
            "returnParameters": {
              "id": 87102,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1950:0:114"
            },
            "scope": 87283,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 87167,
            "nodeType": "FunctionDefinition",
            "src": "5061:457:114",
            "nodes": [],
            "body": {
              "id": 87166,
              "nodeType": "Block",
              "src": "5340:178:114",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 87155,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87130,
                        "src": "5398:4:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87156,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87132,
                        "src": "5404:2:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87157,
                        "name": "baseQuoteTickIndex0",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87135,
                        "src": "5408:19:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_Tick_$5280",
                          "typeString": "Tick"
                        }
                      },
                      {
                        "id": 87158,
                        "name": "_baseQuoteTickOffset",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87137,
                        "src": "5429:20:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87159,
                        "name": "firstAskIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87139,
                        "src": "5451:13:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87160,
                        "name": "bidGives",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87141,
                        "src": "5466:8:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87161,
                        "name": "askGives",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87143,
                        "src": "5476:8:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87162,
                        "name": "pricePoints",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87145,
                        "src": "5486:11:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87163,
                        "name": "stepSize",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87147,
                        "src": "5499:8:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_userDefinedValueType$_Tick_$5280",
                          "typeString": "Tick"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 87153,
                        "name": "KandelLib",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87900,
                        "src": "5353:9:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_KandelLib_$87900_$",
                          "typeString": "type(library KandelLib)"
                        }
                      },
                      "id": 87154,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5363:27:114",
                      "memberName": "createGeometricDistribution",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 87899,
                      "src": "5353:37:114",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_delegatecall_pure$_t_uint256_$_t_uint256_$_t_userDefinedValueType$_Tick_$5280_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_struct$_Distribution_$86630_memory_ptr_$",
                        "typeString": "function (uint256,uint256,Tick,uint256,uint256,uint256,uint256,uint256,uint256) pure returns (struct DirectWithBidsAndAsksDistribution.Distribution memory)"
                      }
                    },
                    "id": 87164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5353:160:114",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Distribution_$86630_memory_ptr",
                      "typeString": "struct DirectWithBidsAndAsksDistribution.Distribution memory"
                    }
                  },
                  "functionReturnParameters": 87152,
                  "id": 87165,
                  "nodeType": "Return",
                  "src": "5346:167:114"
                }
              ]
            },
            "documentation": {
              "id": 87128,
              "nodeType": "StructuredDocumentation",
              "src": "2222:2836:114",
              "text": "@notice Creates a distribution of bids and asks given by the parameters. Dual offers are included with gives=0.\n@param from populate offers starting from this index (inclusive). Must be at most `pricePoints`.\n@param to populate offers until this index (exclusive). Must be at most `pricePoints`.\n@param baseQuoteTickIndex0 the tick of base per quote for the price point at index 0. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.\n@param _baseQuoteTickOffset the tick offset used for the geometric progression deployment. Must be at least 1. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.\n@param firstAskIndex the (inclusive) index after which offer should be an ask. Must be at most `pricePoints`.\n@param bidGives The initial amount of quote to give for all bids. If 0, only book the offer, if type(uint).max then askGives is used as base for bids, and the quote the bid gives is set to according to the price.\n@param askGives The initial amount of base to give for all asks. If 0, only book the offer, if type(uint).max then bidGives is used as quote for asks, and the base the ask gives is set to according to the price.\n@param stepSize in amount of price points to jump for posting dual offer. Must be less than `pricePoints`.\n@param pricePoints the number of price points for the Kandel instance. Must be at least 2.\n@return distribution the distribution of bids and asks to populate\n@dev the absolute price of an offer is the ratio of quote/base volumes of tokens it trades\n@dev the tick of offers on Mangrove are in relative taker price of maker's inbound/outbound volumes of tokens it trades\n@dev for Bids, outbound_tkn=quote, inbound_tkn=base so relative taker price of a a bid is the inverse of the absolute price.\n@dev for Asks, outbound_tkn=base, inbound_tkn=quote so relative taker price of an ask coincides with absolute price.\n@dev Index0 will contain the ask with the lowest relative price and the bid with the highest relative price. Absolute price is geometrically increasing over indexes.\n@dev tickOffset moves an offer relative price s.t. `AskTick_{i+1} = AskTick_i + tickOffset` and `BidTick_{i+1} = BidTick_i - tickOffset`\n@dev A hole is left in the middle at the size of stepSize - either an offer or its dual is posted, not both.\n@dev The caller should make sure the minimum and maximum tick does not exceed the MIN_TICK and MAX_TICK from respectively; otherwise, populate will fail for those offers.\n@dev If type(uint).max is used for `bidGives` or `askGives` then very high or low prices can yield gives=0 (which results in both offer an dual being dead) or gives>=type(uin96).max which is not supported by Mangrove."
            },
            "functionSelector": "3fce15c9",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "createDistribution",
            "nameLocation": "5070:18:114",
            "parameters": {
              "id": 87148,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 87130,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "5099:4:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87167,
                  "src": "5094:9:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87129,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5094:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87132,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "5114:2:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87167,
                  "src": "5109:7:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87131,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5109:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87135,
                  "mutability": "mutable",
                  "name": "baseQuoteTickIndex0",
                  "nameLocation": "5127:19:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87167,
                  "src": "5122:24:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_Tick_$5280",
                    "typeString": "Tick"
                  },
                  "typeName": {
                    "id": 87134,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 87133,
                      "name": "Tick",
                      "nameLocations": [
                        "5122:4:114"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5280,
                      "src": "5122:4:114"
                    },
                    "referencedDeclaration": 5280,
                    "src": "5122:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_Tick_$5280",
                      "typeString": "Tick"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87137,
                  "mutability": "mutable",
                  "name": "_baseQuoteTickOffset",
                  "nameLocation": "5157:20:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87167,
                  "src": "5152:25:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87136,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5152:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87139,
                  "mutability": "mutable",
                  "name": "firstAskIndex",
                  "nameLocation": "5188:13:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87167,
                  "src": "5183:18:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87138,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5183:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87141,
                  "mutability": "mutable",
                  "name": "bidGives",
                  "nameLocation": "5212:8:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87167,
                  "src": "5207:13:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87140,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5207:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87143,
                  "mutability": "mutable",
                  "name": "askGives",
                  "nameLocation": "5231:8:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87167,
                  "src": "5226:13:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87142,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5226:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87145,
                  "mutability": "mutable",
                  "name": "pricePoints",
                  "nameLocation": "5250:11:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87167,
                  "src": "5245:16:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87144,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5245:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87147,
                  "mutability": "mutable",
                  "name": "stepSize",
                  "nameLocation": "5272:8:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87167,
                  "src": "5267:13:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87146,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5267:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5088:196:114"
            },
            "returnParameters": {
              "id": 87152,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 87151,
                  "mutability": "mutable",
                  "name": "distribution",
                  "nameLocation": "5326:12:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87167,
                  "src": "5306:32:114",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Distribution_$86630_memory_ptr",
                    "typeString": "struct DirectWithBidsAndAsksDistribution.Distribution"
                  },
                  "typeName": {
                    "id": 87150,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 87149,
                      "name": "Distribution",
                      "nameLocations": [
                        "5306:12:114"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 86630,
                      "src": "5306:12:114"
                    },
                    "referencedDeclaration": 86630,
                    "src": "5306:12:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Distribution_$86630_storage_ptr",
                      "typeString": "struct DirectWithBidsAndAsksDistribution.Distribution"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5305:34:114"
            },
            "scope": 87283,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 87232,
            "nodeType": "FunctionDefinition",
            "src": "6971:572:114",
            "nodes": [],
            "body": {
              "id": 87231,
              "nodeType": "Block",
              "src": "7254:289:114",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 87198,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 87195,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "7264:3:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 87196,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7268:5:114",
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "src": "7264:9:114",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 87197,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7276:1:114",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "7264:13:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 87208,
                  "nodeType": "IfStatement",
                  "src": "7260:62:114",
                  "trueBody": {
                    "id": 87207,
                    "nodeType": "Block",
                    "src": "7279:43:114",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 87199,
                                "name": "MGV",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 81629,
                                "src": "7287:3:114",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IMangrove_$54127",
                                  "typeString": "contract IMangrove"
                                }
                              },
                              "id": 87201,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7291:4:114",
                              "memberName": "fund",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 53709,
                              "src": "7287:8:114",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_payable$__$returns$__$",
                                "typeString": "function () payable external"
                              }
                            },
                            "id": 87204,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "expression": {
                                  "id": 87202,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "7303:3:114",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 87203,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "7307:5:114",
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "7303:9:114",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "7287:26:114",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_payable$__$returns$__$value",
                              "typeString": "function () payable external"
                            }
                          },
                          "id": 87205,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7287:28:114",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 87206,
                        "nodeType": "ExpressionStatement",
                        "src": "7287:28:114"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 87210,
                        "name": "parameters",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87186,
                        "src": "7337:10:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Params_$85853_calldata_ptr",
                          "typeString": "struct CoreKandel.Params calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_Params_$85853_calldata_ptr",
                          "typeString": "struct CoreKandel.Params calldata"
                        }
                      ],
                      "id": 87209,
                      "name": "setParams",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 86062,
                      "src": "7327:9:114",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Params_$85853_calldata_ptr_$returns$__$",
                        "typeString": "function (struct CoreKandel.Params calldata)"
                      }
                    },
                    "id": 87211,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7327:21:114",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 87212,
                  "nodeType": "ExpressionStatement",
                  "src": "7327:21:114"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 87214,
                        "name": "_baseQuoteTickOffset",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87177,
                        "src": "7377:20:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 87213,
                      "name": "setBaseQuoteTickOffset",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 87127,
                      "src": "7354:22:114",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 87215,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7354:44:114",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 87216,
                  "nodeType": "ExpressionStatement",
                  "src": "7354:44:114"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 87218,
                        "name": "baseAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87188,
                        "src": "7418:10:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87219,
                        "name": "quoteAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87190,
                        "src": "7430:11:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 87217,
                      "name": "depositFunds",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 86452,
                      "src": "7405:12:114",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 87220,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7405:37:114",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 87221,
                  "nodeType": "ExpressionStatement",
                  "src": "7405:37:114"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 87223,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87170,
                        "src": "7473:4:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87224,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87172,
                        "src": "7479:2:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87225,
                        "name": "baseQuoteTickIndex0",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87175,
                        "src": "7483:19:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_Tick_$5280",
                          "typeString": "Tick"
                        }
                      },
                      {
                        "id": 87226,
                        "name": "firstAskIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87179,
                        "src": "7504:13:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87227,
                        "name": "bidGives",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87181,
                        "src": "7519:8:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87228,
                        "name": "askGives",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87183,
                        "src": "7529:8:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_userDefinedValueType$_Tick_$5280",
                          "typeString": "Tick"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 87222,
                      "name": "populateChunkFromOffset",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 87282,
                      "src": "7449:23:114",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_userDefinedValueType$_Tick_$5280_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256,Tick,uint256,uint256,uint256)"
                      }
                    },
                    "id": 87229,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7449:89:114",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 87230,
                  "nodeType": "ExpressionStatement",
                  "src": "7449:89:114"
                }
              ]
            },
            "documentation": {
              "id": 87168,
              "nodeType": "StructuredDocumentation",
              "src": "5522:1446:114",
              "text": "@notice publishes bids/asks according to a geometric distribution, and sets all parameters according to inputs.\n@param from populate offers starting from this index (inclusive).\n@param to populate offers until this index (exclusive).\n@param baseQuoteTickIndex0 the tick of base per quote for the price point at index 0. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.\n@param _baseQuoteTickOffset the tick offset used for the geometric progression deployment. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.\n@param firstAskIndex the (inclusive) index after which offer should be an ask.\n@param bidGives The initial amount of quote to give for all bids. If 0, only book the offer, if type(uint).max then askGives is used as base for bids, and the quote the bid gives is set to according to the price.\n@param askGives The initial amount of base to give for all asks. If 0, only book the offer, if type(uint).max then bidGives is used as quote for asks, and the base the ask gives is set to according to the price.\n@param parameters the parameters for Kandel. Only changed parameters will cause updates. Set `gasreq` and `gasprice` to 0 to keep existing values.\n@param baseAmount base amount to deposit\n@param quoteAmount quote amount to deposit\n@dev See `createDistribution` for further details."
            },
            "functionSelector": "e4f248f4",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 87193,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 87192,
                  "name": "onlyAdmin",
                  "nameLocations": [
                    "7244:9:114"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 89769,
                  "src": "7244:9:114"
                },
                "nodeType": "ModifierInvocation",
                "src": "7244:9:114"
              }
            ],
            "name": "populateFromOffset",
            "nameLocation": "6980:18:114",
            "parameters": {
              "id": 87191,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 87170,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "7009:4:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87232,
                  "src": "7004:9:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87169,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7004:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87172,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "7024:2:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87232,
                  "src": "7019:7:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87171,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7019:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87175,
                  "mutability": "mutable",
                  "name": "baseQuoteTickIndex0",
                  "nameLocation": "7037:19:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87232,
                  "src": "7032:24:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_Tick_$5280",
                    "typeString": "Tick"
                  },
                  "typeName": {
                    "id": 87174,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 87173,
                      "name": "Tick",
                      "nameLocations": [
                        "7032:4:114"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5280,
                      "src": "7032:4:114"
                    },
                    "referencedDeclaration": 5280,
                    "src": "7032:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_Tick_$5280",
                      "typeString": "Tick"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87177,
                  "mutability": "mutable",
                  "name": "_baseQuoteTickOffset",
                  "nameLocation": "7067:20:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87232,
                  "src": "7062:25:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87176,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7062:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87179,
                  "mutability": "mutable",
                  "name": "firstAskIndex",
                  "nameLocation": "7098:13:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87232,
                  "src": "7093:18:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87178,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7093:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87181,
                  "mutability": "mutable",
                  "name": "bidGives",
                  "nameLocation": "7122:8:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87232,
                  "src": "7117:13:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87180,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7117:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87183,
                  "mutability": "mutable",
                  "name": "askGives",
                  "nameLocation": "7141:8:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87232,
                  "src": "7136:13:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87182,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7136:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87186,
                  "mutability": "mutable",
                  "name": "parameters",
                  "nameLocation": "7171:10:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87232,
                  "src": "7155:26:114",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Params_$85853_calldata_ptr",
                    "typeString": "struct CoreKandel.Params"
                  },
                  "typeName": {
                    "id": 87185,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 87184,
                      "name": "Params",
                      "nameLocations": [
                        "7155:6:114"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 85853,
                      "src": "7155:6:114"
                    },
                    "referencedDeclaration": 85853,
                    "src": "7155:6:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Params_$85853_storage_ptr",
                      "typeString": "struct CoreKandel.Params"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87188,
                  "mutability": "mutable",
                  "name": "baseAmount",
                  "nameLocation": "7192:10:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87232,
                  "src": "7187:15:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87187,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7187:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87190,
                  "mutability": "mutable",
                  "name": "quoteAmount",
                  "nameLocation": "7213:11:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87232,
                  "src": "7208:16:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87189,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7208:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6998:230:114"
            },
            "returnParameters": {
              "id": 87194,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7254:0:114"
            },
            "scope": 87283,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 87282,
            "nodeType": "FunctionDefinition",
            "src": "8674:558:114",
            "nodes": [],
            "body": {
              "id": 87281,
              "nodeType": "Block",
              "src": "8856:376:114",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    87253
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 87253,
                      "mutability": "mutable",
                      "name": "parameters",
                      "nameLocation": "8876:10:114",
                      "nodeType": "VariableDeclaration",
                      "scope": 87281,
                      "src": "8862:24:114",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Params_$85853_memory_ptr",
                        "typeString": "struct CoreKandel.Params"
                      },
                      "typeName": {
                        "id": 87252,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 87251,
                          "name": "Params",
                          "nameLocations": [
                            "8862:6:114"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 85853,
                          "src": "8862:6:114"
                        },
                        "referencedDeclaration": 85853,
                        "src": "8862:6:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Params_$85853_storage_ptr",
                          "typeString": "struct CoreKandel.Params"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 87255,
                  "initialValue": {
                    "id": 87254,
                    "name": "params",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 85857,
                    "src": "8889:6:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Params_$85853_storage",
                      "typeString": "struct CoreKandel.Params storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8862:33:114"
                },
                {
                  "assignments": [
                    87258
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 87258,
                      "mutability": "mutable",
                      "name": "distribution",
                      "nameLocation": "8921:12:114",
                      "nodeType": "VariableDeclaration",
                      "scope": 87281,
                      "src": "8901:32:114",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Distribution_$86630_memory_ptr",
                        "typeString": "struct DirectWithBidsAndAsksDistribution.Distribution"
                      },
                      "typeName": {
                        "id": 87257,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 87256,
                          "name": "Distribution",
                          "nameLocations": [
                            "8901:12:114"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 86630,
                          "src": "8901:12:114"
                        },
                        "referencedDeclaration": 86630,
                        "src": "8901:12:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Distribution_$86630_storage_ptr",
                          "typeString": "struct DirectWithBidsAndAsksDistribution.Distribution"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 87272,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 87260,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87235,
                        "src": "8962:4:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87261,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87237,
                        "src": "8974:2:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87262,
                        "name": "baseQuoteTickIndex0",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87240,
                        "src": "8984:19:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_Tick_$5280",
                          "typeString": "Tick"
                        }
                      },
                      {
                        "id": 87263,
                        "name": "baseQuoteTickOffset",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87074,
                        "src": "9011:19:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87264,
                        "name": "firstAskIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87242,
                        "src": "9038:13:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87265,
                        "name": "bidGives",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87244,
                        "src": "9059:8:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 87266,
                        "name": "askGives",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87246,
                        "src": "9075:8:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 87267,
                          "name": "parameters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 87253,
                          "src": "9091:10:114",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Params_$85853_memory_ptr",
                            "typeString": "struct CoreKandel.Params memory"
                          }
                        },
                        "id": 87268,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "9102:11:114",
                        "memberName": "pricePoints",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 85852,
                        "src": "9091:22:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint112",
                          "typeString": "uint112"
                        }
                      },
                      {
                        "expression": {
                          "id": 87269,
                          "name": "parameters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 87253,
                          "src": "9121:10:114",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Params_$85853_memory_ptr",
                            "typeString": "struct CoreKandel.Params memory"
                          }
                        },
                        "id": 87270,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "9132:8:114",
                        "memberName": "stepSize",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 85850,
                        "src": "9121:19:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint88",
                          "typeString": "uint88"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_userDefinedValueType$_Tick_$5280",
                          "typeString": "Tick"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint112",
                          "typeString": "uint112"
                        },
                        {
                          "typeIdentifier": "t_uint88",
                          "typeString": "uint88"
                        }
                      ],
                      "id": 87259,
                      "name": "createDistribution",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 87167,
                      "src": "8936:18:114",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_userDefinedValueType$_Tick_$5280_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_struct$_Distribution_$86630_memory_ptr_$",
                        "typeString": "function (uint256,uint256,Tick,uint256,uint256,uint256,uint256,uint256,uint256) pure returns (struct DirectWithBidsAndAsksDistribution.Distribution memory)"
                      }
                    },
                    "id": 87271,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8936:210:114",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Distribution_$86630_memory_ptr",
                      "typeString": "struct DirectWithBidsAndAsksDistribution.Distribution memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8901:245:114"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 87274,
                        "name": "distribution",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 87258,
                        "src": "9174:12:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Distribution_$86630_memory_ptr",
                          "typeString": "struct DirectWithBidsAndAsksDistribution.Distribution memory"
                        }
                      },
                      {
                        "expression": {
                          "id": 87275,
                          "name": "parameters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 87253,
                          "src": "9188:10:114",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Params_$85853_memory_ptr",
                            "typeString": "struct CoreKandel.Params memory"
                          }
                        },
                        "id": 87276,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "9199:6:114",
                        "memberName": "gasreq",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 85848,
                        "src": "9188:17:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint24",
                          "typeString": "uint24"
                        }
                      },
                      {
                        "expression": {
                          "id": 87277,
                          "name": "parameters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 87253,
                          "src": "9207:10:114",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Params_$85853_memory_ptr",
                            "typeString": "struct CoreKandel.Params memory"
                          }
                        },
                        "id": 87278,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "9218:8:114",
                        "memberName": "gasprice",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 85846,
                        "src": "9207:19:114",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_Distribution_$86630_memory_ptr",
                          "typeString": "struct DirectWithBidsAndAsksDistribution.Distribution memory"
                        },
                        {
                          "typeIdentifier": "t_uint24",
                          "typeString": "uint24"
                        },
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      ],
                      "id": 87273,
                      "name": "populateChunkInternal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 86698,
                      "src": "9152:21:114",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Distribution_$86630_memory_ptr_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (struct DirectWithBidsAndAsksDistribution.Distribution memory,uint256,uint256)"
                      }
                    },
                    "id": 87279,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9152:75:114",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 87280,
                  "nodeType": "ExpressionStatement",
                  "src": "9152:75:114"
                }
              ]
            },
            "documentation": {
              "id": 87233,
              "nodeType": "StructuredDocumentation",
              "src": "7547:1124:114",
              "text": "@notice publishes bids/asks according to a geometric distribution, and reads parameters from the Kandel instance.\n@param from populate offers starting from this index (inclusive).\n@param to populate offers until this index (exclusive).\n@param baseQuoteTickIndex0 the tick of base per quote for the price point at index 0. It is recommended that this is a multiple of tickSpacing for the offer lists to avoid rounding.\n@param firstAskIndex the (inclusive) index after which offer should be an ask.\n@param bidGives The initial amount of quote to give for all bids. If 0, only book the offer, if type(uint).max then askGives is used as base for bids, and the quote the bid gives is set to according to the price.\n@param askGives The initial amount of base to give for all asks. If 0, only book the offer, if type(uint).max then bidGives is used as quote for asks, and the base the ask gives is set to according to the price.\n@dev This is typically used after a call to `populateFromOffset` to populate the rest of the offers with the same parameters. See that function for further details."
            },
            "functionSelector": "4f605c5b",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 87249,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 87248,
                  "name": "onlyAdmin",
                  "nameLocations": [
                    "8846:9:114"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 89769,
                  "src": "8846:9:114"
                },
                "nodeType": "ModifierInvocation",
                "src": "8846:9:114"
              }
            ],
            "name": "populateChunkFromOffset",
            "nameLocation": "8683:23:114",
            "parameters": {
              "id": 87247,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 87235,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "8717:4:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87282,
                  "src": "8712:9:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87234,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "8712:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87237,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "8732:2:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87282,
                  "src": "8727:7:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87236,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "8727:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87240,
                  "mutability": "mutable",
                  "name": "baseQuoteTickIndex0",
                  "nameLocation": "8745:19:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87282,
                  "src": "8740:24:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_Tick_$5280",
                    "typeString": "Tick"
                  },
                  "typeName": {
                    "id": 87239,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 87238,
                      "name": "Tick",
                      "nameLocations": [
                        "8740:4:114"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5280,
                      "src": "8740:4:114"
                    },
                    "referencedDeclaration": 5280,
                    "src": "8740:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_Tick_$5280",
                      "typeString": "Tick"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87242,
                  "mutability": "mutable",
                  "name": "firstAskIndex",
                  "nameLocation": "8775:13:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87282,
                  "src": "8770:18:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87241,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "8770:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87244,
                  "mutability": "mutable",
                  "name": "bidGives",
                  "nameLocation": "8799:8:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87282,
                  "src": "8794:13:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87243,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "8794:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 87246,
                  "mutability": "mutable",
                  "name": "askGives",
                  "nameLocation": "8818:8:114",
                  "nodeType": "VariableDeclaration",
                  "scope": 87282,
                  "src": "8813:13:114",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 87245,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "8813:4:114",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8706:124:114"
            },
            "returnParameters": {
              "id": 87250,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8856:0:114"
            },
            "scope": 87283,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 87065,
              "name": "CoreKandel",
              "nameLocations": [
                "524:10:114"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 86559,
              "src": "524:10:114"
            },
            "id": 87066,
            "nodeType": "InheritanceSpecifier",
            "src": "524:10:114"
          }
        ],
        "canonicalName": "GeometricKandel",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 87064,
          "nodeType": "StructuredDocumentation",
          "src": "366:121:114",
          "text": "@title Adds a geometric price progression to a `CoreKandel` strat without storing prices for individual price points."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          87283,
          86559,
          88101,
          87048,
          87442,
          87942,
          85066,
          82367,
          83578,
          56211,
          89841
        ],
        "name": "GeometricKandel",
        "nameLocation": "505:15:114",
        "scope": 87284,
        "usedErrors": [],
        "usedEvents": [
          81661,
          83467,
          83473,
          84653,
          85817,
          85822,
          85827,
          85835,
          85843,
          86584,
          86587,
          86590,
          86593,
          87071,
          87296,
          87306,
          87961,
          89732
        ]
      }
    ],
    "license": "BSD-2-Clause"
  },
  "id": 114
}