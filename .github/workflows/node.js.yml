name: CI

on:
  workflow_dispatch:
  push:
    branches: 
      - master
      - develop
      - 'run-ci/**'
  pull_request:
    branches: [ master, develop, test-pr ]
    types: [opened, synchronize, reopened, labeled]

concurrency: 
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  NODE_ENV: test

jobs:
  # ==== Job: Build and test bot-utils ====
  bot-utils:
    runs-on: ubuntu-latest

    env:
      working-directory: packages/bot-utils

    defaults:
      run:
        working-directory: ${{env.working-directory}}

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Yarn setup (caching yarn dependencies)
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'yarn'
        
    - run: yarn install --immutable
      working-directory: . # Yarn must run in root to ensure monorepo setup

    - name: Foundry Setup
      uses: ./.github/actions/foundry-setup

    # == build ==
    - name: Bot Utils - Build
      run: yarn run build

    - name: Save status of build
      run: echo "bot_utils_built=true" >> $GITHUB_ENV    

     # == run and report tests == 
    - name: Bot Utils - Tests
      run: yarn run test:coverage

    - uses: actions/upload-artifact@v2
      if: ${{ env.bot_utils_built && (success() || failure())}}
      with:
        name: test-results-bot-utils
        path: packages/bot-utils/coverage-tests-report.json

  # ==== End job: bot-utils ====        

  # ==== Job: Build and test bot-cleaning ====
  bot-cleaning:
    runs-on: ubuntu-latest

    env:
      working-directory: packages/bot-cleaning

    defaults:
      run:
        working-directory: ${{env.working-directory}}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Yarn setup (caching yarn dependencies)
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'yarn'
        
    - run: yarn install --immutable
      working-directory: . # Yarn must run in root to ensure monorepo setup

    - name: Foundry Setup
      uses: ./.github/actions/foundry-setup

    # == build ==
    - name: Cleaning Bot - Build
      run: yarn run build

    - name: Save status of build
      run: echo "cleaning_bot_built=true" >> $GITHUB_ENV    

     # == run and report tests == 
    - name: Cleaning Bot - Tests
      run: yarn run test:coverage

    - uses: actions/upload-artifact@v2
      if: ${{ env.cleaning_bot_built && (success() || failure())}}
      with:
        name: test-results-bot-cleaning
        path: packages/bot-cleaning/coverage-tests-report.json

  # ==== End job: bot-cleaning ====        

  # ==== Job: Build and test bot-updategas ====
  bot-updategas:
    runs-on: ubuntu-latest

    env:
      working-directory: packages/bot-updategas

    defaults:
      run:
        working-directory: ${{env.working-directory}}

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Yarn setup (caching yarn dependencies)
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'yarn'
        
    - run: yarn install --immutable
      working-directory: . # Yarn must run in root to ensure monorepo setup

    - name: Foundry Setup
      uses: ./.github/actions/foundry-setup

    # == build ==
    - name: Update Gas Bot - Build
      run: yarn run build

    - name: Save status of build
      run: echo "updategas_bot_built=true" >> $GITHUB_ENV    

    # == run and report tests == 
    - name: Update Gas Bot - Tests
      run: yarn run test:coverage

    - uses: actions/upload-artifact@v2
      if: ${{ env.updategas_bot_built && (success() || failure())}}
      with:
        name: test-results-bot-updategas
        path: packages/bot-updategas/coverage-tests-report.json

  # ==== End job: bot-updategas ====
          
  # ==== Job: Build and test bot-maker-noise ====
  bot-maker-noise:
    runs-on: ubuntu-latest

    env:
      working-directory: packages/bot-maker-noise

    defaults:
      run:
        working-directory: ${{env.working-directory}}

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Yarn setup (caching yarn dependencies)
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'yarn'

    - run: yarn install --immutable
      working-directory: . # Yarn must run in root to ensure monorepo setup

    - name: Foundry Setup
      uses: ./.github/actions/foundry-setup
      
    # == build ==
    - name: Noise Maker Bot - Build
      run: yarn run build

    - name: Save status of build
      run: echo "bot_maker_noise_built=true" >> $GITHUB_ENV    

    # == run and report tests == 
    - name: Noise Maker Bot - Tests
      run: yarn run test:coverage

    - uses: actions/upload-artifact@v2
      if: ${{ env.bot_maker_noise_built && (success() || failure())}}
      with:
        name: test-results-bot-maker-noise
        path: packages/bot-maker-noise/coverage-tests-report.json

  # ==== End job: bot-maker-noise ====        
          
  # ==== Job: Build and test bot-taker-greedy ====
  bot-taker-greedy:
    runs-on: ubuntu-latest

    env:
      working-directory: packages/bot-taker-greedy

    defaults:
      run:
        working-directory: ${{env.working-directory}}

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Yarn setup (caching yarn dependencies)
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'yarn'
        
    - run: yarn install --immutable
      working-directory: . # Yarn must run in root to ensure monorepo setup

    - name: Foundry Setup
      uses: ./.github/actions/foundry-setup
        
    # == build ==
    - name: Greedy Taker Bot - Build
      run: yarn run build

    - name: Save status of build
      run: echo "bot_taker_greedy_built=true" >> $GITHUB_ENV    

    # == run and report tests == 
    - name: Greedy Taker Bot - Tests
      run: yarn run test:coverage

    - uses: actions/upload-artifact@v2
      if: ${{ env.bot_taker_greedy_built && (success() || failure())}}
      with:
        name: test-results-bot-taker-greedy
        path: packages/bot-taker-greedy/coverage-tests-report.json

  # ==== End job: bot-taker-greedy ====        

  # ==== Job: Build and test bot-failing-offer ====
  bot-failing-offer:
    runs-on: ubuntu-latest

    env:
      working-directory: packages/bot-failing-offer

    defaults:
      run:
        working-directory: ${{env.working-directory}}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Yarn setup (caching yarn dependencies)
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'yarn'

    - run: yarn install --immutable
      working-directory: . # Yarn must run in root to ensure monorepo setup

    - name: Foundry Setup
      uses: ./.github/actions/foundry-setup
      
    # == build ==
    - name: Failing Offer Bot - Build
      run: yarn run build

    - name: Save status of build
      run: echo "bot_failing_offer_built=true" >> $GITHUB_ENV    

    # == run and report tests == 
    - name: Failing Offer Bot - Tests
      run: yarn run test:coverage

    - uses: actions/upload-artifact@v2
      if: ${{ env.bot_failing_offer_built && (success() || failure())}}
      with:
        name: test-results-bot-failing-offer
        path: packages/bot-failing-offer/coverage-tests-report.json

  # ==== End job: bot-failing-offer ====        

  # ==== Job: Build and test Mangrove arbitrage contract ====
  mangrove-arbitrage-contract:
    runs-on: ubuntu-latest

    env:
      working-directory: packages/mangrove-arbitrage
      POLYGON_NODE_URL: ${{ secrets.POLYGON_NODE_URL || 'https://polygon.llamarpc.com' }}
      MUMBAI_NODE_URL: ${{ secrets.MUMBAI_NODE_URL || 'unused' }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Yarn setup (caching yarn dependencies)
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'yarn'
        
    - run: yarn install --immutable
      working-directory: . # Yarn must run in root to ensure monorepo setup

    - name: Foundry Setup
      uses: ./.github/actions/foundry-setup

    # == build ==
    - name: Solidity Compile
      run: yarn run build-this-package
      working-directory: packages/mangrove-arbitrage

    - name: Save status of build
      # So we can fail-fast and drop the X Test Report steps, if build fails
      # A tiny bit hacky, but it's simple and works
      run: echo "mangrove_arbitrage_built=true" >> $GITHUB_ENV

    # Run local Solidity tests
    - name: Solidity Tests
      run: yarn run test
      working-directory: packages/mangrove-arbitrage

    # For push runs we also create a coverage report
    - name: Create coverage report
      if: github.event_name != 'pull_request' 
      run: forge coverage --report lcov
      working-directory: packages/mangrove-arbitrage

     # == Send coverage report to Coveralls == 
     # Coverallsapp by default uses GITHUB_SHA but that does not necessarily correspond
     # to HEAD because a branch is checked out. We here find the actual SHA for HEAD.
    - name: Set Coveralls vars
      id: coveralls_vars
      if: github.event_name != 'pull_request' 
      run: echo "::set-output name=sha_for_head::$(git rev-parse HEAD)"

    - name: Upload to Coveralls
      uses: coverallsapp/github-action@master
      if: github.event_name != 'pull_request' 
      with:
        git-commit: ${{ steps.coveralls_vars.outputs.sha_for_head }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: packages/mangrove-arbitrage/lcov.info
        base-path	: packages/mangrove-arbitrage
        flag-name: solidity

    # NOTE: uncomment once you can manage forge test 
    # outputs in gh actions
    # - name: Mangrove Solidity Test Report
    #   uses: dorny/test-reporter@v1
    #   if: ${{ env.mangrove_arbitrage_built && (success() || failure()) }}
    #   with:
    #     name: Solidity Tests                  # Name of the check run which will be created
    #     path: ${{env.working-directory}}/solidity-mocha-test-report.json # Path to test results
    #     reporter: mocha-json                  # Format of test results

    # == check precommit works ==
    - run: yarn run precommit
      working-directory: packages/mangrove-arbitrage

  # ==== End job mangrove-arbitrage-contract ====

 # ==== Job: Build and test bot-arbitrage ====
  bot-arbitrage:
    runs-on: ubuntu-latest

    env:
      working-directory: packages/bot-arbitrage
      POLYGON_NODE_URL: ${{ secrets.POLYGON_NODE_URL || 'https://polygon.llamarpc.com' }}
      API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
      GAS_PRICE_FALLBACK: 300 # in case ALCHEMY_API_KEY is not available due to PR from fork

    defaults:
      run:
        working-directory: ${{env.working-directory}}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Yarn setup (caching yarn dependencies)
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'yarn'

    - run: yarn install --immutable
      working-directory: . # Yarn must run in root to ensure monorepo setup

    - name: Foundry Setup
      uses: ./.github/actions/foundry-setup
      
    # == build ==
    - name: Arbitrage Bot - Build
      run: yarn run build

    - name: Save status of build
      run: echo "bot_arbitrage_built=true" >> $GITHUB_ENV    

    # == run and report tests == 
    - name: Arbitrage Bot - Tests
      run: yarn run test:coverage

    - uses: actions/upload-artifact@v2
      if: ${{ env.bot_arbitrage_built && (success() || failure())}}
      with:
        name: test-results-bot-arbitrage
        path: packages/bot-arbitrage/coverage-tests-report.json

  # ==== End job: bot-arbitrage ==== 

  # ==== final "check" job, using alls-green to have one single job to check for green workflow ====
  # see https://github.com/re-actors/alls-green

  check:
    if: always()

    needs:
    - bot-utils
    - bot-cleaning
    - bot-maker-noise
    - bot-failing-offer
    - bot-taker-greedy
    - bot-updategas
    - bot-arbitrage
    - mangrove-arbitrage-contract

    runs-on: ubuntu-latest

    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
