schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Account {
  id: Bytes!
  address: Bytes!
  creationDate: BigInt!
  latestInteractionDate: BigInt!
  volumes(
    skip: Int = 0
    first: Int = 100
    orderBy: AccountVolumeByPair_orderBy
    orderDirection: OrderDirection
    where: AccountVolumeByPair_filter
  ): [AccountVolumeByPair!]!
}

type AccountVolumeByPair {
  id: String!
  account: Account!
  updatedDate: BigInt!
  token0: Bytes!
  token1: Bytes!
  token0Sent: BigInt!
  token0Received: BigInt!
  token1Sent: BigInt!
  token1Received: BigInt!
}

input AccountVolumeByPair_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  updatedDate: BigInt
  updatedDate_not: BigInt
  updatedDate_gt: BigInt
  updatedDate_lt: BigInt
  updatedDate_gte: BigInt
  updatedDate_lte: BigInt
  updatedDate_in: [BigInt!]
  updatedDate_not_in: [BigInt!]
  token0: Bytes
  token0_not: Bytes
  token0_gt: Bytes
  token0_lt: Bytes
  token0_gte: Bytes
  token0_lte: Bytes
  token0_in: [Bytes!]
  token0_not_in: [Bytes!]
  token0_contains: Bytes
  token0_not_contains: Bytes
  token1: Bytes
  token1_not: Bytes
  token1_gt: Bytes
  token1_lt: Bytes
  token1_gte: Bytes
  token1_lte: Bytes
  token1_in: [Bytes!]
  token1_not_in: [Bytes!]
  token1_contains: Bytes
  token1_not_contains: Bytes
  token0Sent: BigInt
  token0Sent_not: BigInt
  token0Sent_gt: BigInt
  token0Sent_lt: BigInt
  token0Sent_gte: BigInt
  token0Sent_lte: BigInt
  token0Sent_in: [BigInt!]
  token0Sent_not_in: [BigInt!]
  token0Received: BigInt
  token0Received_not: BigInt
  token0Received_gt: BigInt
  token0Received_lt: BigInt
  token0Received_gte: BigInt
  token0Received_lte: BigInt
  token0Received_in: [BigInt!]
  token0Received_not_in: [BigInt!]
  token1Sent: BigInt
  token1Sent_not: BigInt
  token1Sent_gt: BigInt
  token1Sent_lt: BigInt
  token1Sent_gte: BigInt
  token1Sent_lte: BigInt
  token1Sent_in: [BigInt!]
  token1Sent_not_in: [BigInt!]
  token1Received: BigInt
  token1Received_not: BigInt
  token1Received_gt: BigInt
  token1Received_lt: BigInt
  token1Received_gte: BigInt
  token1Received_lte: BigInt
  token1Received_in: [BigInt!]
  token1Received_not_in: [BigInt!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [AccountVolumeByPair_filter]
  or: [AccountVolumeByPair_filter]
}

enum AccountVolumeByPair_orderBy {
  id
  account
  account__id
  account__address
  account__creationDate
  account__latestInteractionDate
  updatedDate
  token0
  token1
  token0Sent
  token0Received
  token1Sent
  token1Received
}

input Account_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  creationDate: BigInt
  creationDate_not: BigInt
  creationDate_gt: BigInt
  creationDate_lt: BigInt
  creationDate_gte: BigInt
  creationDate_lte: BigInt
  creationDate_in: [BigInt!]
  creationDate_not_in: [BigInt!]
  latestInteractionDate: BigInt
  latestInteractionDate_not: BigInt
  latestInteractionDate_gt: BigInt
  latestInteractionDate_lt: BigInt
  latestInteractionDate_gte: BigInt
  latestInteractionDate_lte: BigInt
  latestInteractionDate_in: [BigInt!]
  latestInteractionDate_not_in: [BigInt!]
  volumes_: AccountVolumeByPair_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [Account_filter]
  or: [Account_filter]
}

enum Account_orderBy {
  id
  address
  creationDate
  latestInteractionDate
  volumes
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Kandel {
  id: Bytes!
  transactionHash: Bytes!
  creationDate: BigInt!
  seeder: Bytes!
  address: Bytes!
  base: Bytes!
  quote: Bytes!
  deployer: Account!
  admin: Account!
  reserveId: Bytes
  router: Bytes
  depositedBase: BigInt!
  depositedQuote: BigInt!
  gasprice: BigInt
  gasreq: BigInt
  compoundRateBase: BigInt
  compoundRateQuote: BigInt
  spread: BigInt
  ratio: BigInt
  length: BigInt
  offerIndexes: [String!]!
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
  ): [Offer!]!
  depositWithdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: KandelDepositWithdraw_orderBy
    orderDirection: OrderDirection
    where: KandelDepositWithdraw_filter
  ): [KandelDepositWithdraw!]!
  parameters(
    skip: Int = 0
    first: Int = 100
    orderBy: KandelParameters_orderBy
    orderDirection: OrderDirection
    where: KandelParameters_filter
  ): [KandelParameters!]!
}

type KandelDepositWithdraw {
  id: String!
  transactionHash: Bytes!
  date: BigInt!
  token: Bytes!
  amount: BigInt!
  isDeposit: Boolean!
  kandel: Kandel!
}

input KandelDepositWithdraw_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  date: BigInt
  date_not: BigInt
  date_gt: BigInt
  date_lt: BigInt
  date_gte: BigInt
  date_lte: BigInt
  date_in: [BigInt!]
  date_not_in: [BigInt!]
  token: Bytes
  token_not: Bytes
  token_gt: Bytes
  token_lt: Bytes
  token_gte: Bytes
  token_lte: Bytes
  token_in: [Bytes!]
  token_not_in: [Bytes!]
  token_contains: Bytes
  token_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  isDeposit: Boolean
  isDeposit_not: Boolean
  isDeposit_in: [Boolean!]
  isDeposit_not_in: [Boolean!]
  kandel: String
  kandel_not: String
  kandel_gt: String
  kandel_lt: String
  kandel_gte: String
  kandel_lte: String
  kandel_in: [String!]
  kandel_not_in: [String!]
  kandel_contains: String
  kandel_contains_nocase: String
  kandel_not_contains: String
  kandel_not_contains_nocase: String
  kandel_starts_with: String
  kandel_starts_with_nocase: String
  kandel_not_starts_with: String
  kandel_not_starts_with_nocase: String
  kandel_ends_with: String
  kandel_ends_with_nocase: String
  kandel_not_ends_with: String
  kandel_not_ends_with_nocase: String
  kandel_: Kandel_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [KandelDepositWithdraw_filter]
  or: [KandelDepositWithdraw_filter]
}

enum KandelDepositWithdraw_orderBy {
  id
  transactionHash
  date
  token
  amount
  isDeposit
  kandel
  kandel__id
  kandel__transactionHash
  kandel__creationDate
  kandel__seeder
  kandel__address
  kandel__base
  kandel__quote
  kandel__reserveId
  kandel__router
  kandel__depositedBase
  kandel__depositedQuote
  kandel__gasprice
  kandel__gasreq
  kandel__compoundRateBase
  kandel__compoundRateQuote
  kandel__spread
  kandel__ratio
  kandel__length
}

type KandelParameters {
  id: String!
  transactionHash: Bytes!
  creationDate: BigInt!
  gasprice: BigInt
  gasreq: BigInt
  compoundRateBase: BigInt
  compoundRateQuote: BigInt
  spread: BigInt
  ratio: BigInt
  length: BigInt
  kandel: Kandel!
}

input KandelParameters_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  creationDate: BigInt
  creationDate_not: BigInt
  creationDate_gt: BigInt
  creationDate_lt: BigInt
  creationDate_gte: BigInt
  creationDate_lte: BigInt
  creationDate_in: [BigInt!]
  creationDate_not_in: [BigInt!]
  gasprice: BigInt
  gasprice_not: BigInt
  gasprice_gt: BigInt
  gasprice_lt: BigInt
  gasprice_gte: BigInt
  gasprice_lte: BigInt
  gasprice_in: [BigInt!]
  gasprice_not_in: [BigInt!]
  gasreq: BigInt
  gasreq_not: BigInt
  gasreq_gt: BigInt
  gasreq_lt: BigInt
  gasreq_gte: BigInt
  gasreq_lte: BigInt
  gasreq_in: [BigInt!]
  gasreq_not_in: [BigInt!]
  compoundRateBase: BigInt
  compoundRateBase_not: BigInt
  compoundRateBase_gt: BigInt
  compoundRateBase_lt: BigInt
  compoundRateBase_gte: BigInt
  compoundRateBase_lte: BigInt
  compoundRateBase_in: [BigInt!]
  compoundRateBase_not_in: [BigInt!]
  compoundRateQuote: BigInt
  compoundRateQuote_not: BigInt
  compoundRateQuote_gt: BigInt
  compoundRateQuote_lt: BigInt
  compoundRateQuote_gte: BigInt
  compoundRateQuote_lte: BigInt
  compoundRateQuote_in: [BigInt!]
  compoundRateQuote_not_in: [BigInt!]
  spread: BigInt
  spread_not: BigInt
  spread_gt: BigInt
  spread_lt: BigInt
  spread_gte: BigInt
  spread_lte: BigInt
  spread_in: [BigInt!]
  spread_not_in: [BigInt!]
  ratio: BigInt
  ratio_not: BigInt
  ratio_gt: BigInt
  ratio_lt: BigInt
  ratio_gte: BigInt
  ratio_lte: BigInt
  ratio_in: [BigInt!]
  ratio_not_in: [BigInt!]
  length: BigInt
  length_not: BigInt
  length_gt: BigInt
  length_lt: BigInt
  length_gte: BigInt
  length_lte: BigInt
  length_in: [BigInt!]
  length_not_in: [BigInt!]
  kandel: String
  kandel_not: String
  kandel_gt: String
  kandel_lt: String
  kandel_gte: String
  kandel_lte: String
  kandel_in: [String!]
  kandel_not_in: [String!]
  kandel_contains: String
  kandel_contains_nocase: String
  kandel_not_contains: String
  kandel_not_contains_nocase: String
  kandel_starts_with: String
  kandel_starts_with_nocase: String
  kandel_not_starts_with: String
  kandel_not_starts_with_nocase: String
  kandel_ends_with: String
  kandel_ends_with_nocase: String
  kandel_not_ends_with: String
  kandel_not_ends_with_nocase: String
  kandel_: Kandel_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [KandelParameters_filter]
  or: [KandelParameters_filter]
}

enum KandelParameters_orderBy {
  id
  transactionHash
  creationDate
  gasprice
  gasreq
  compoundRateBase
  compoundRateQuote
  spread
  ratio
  length
  kandel
  kandel__id
  kandel__transactionHash
  kandel__creationDate
  kandel__seeder
  kandel__address
  kandel__base
  kandel__quote
  kandel__reserveId
  kandel__router
  kandel__depositedBase
  kandel__depositedQuote
  kandel__gasprice
  kandel__gasreq
  kandel__compoundRateBase
  kandel__compoundRateQuote
  kandel__spread
  kandel__ratio
  kandel__length
}

type KandelPopulateRetract {
  id: String!
  transactionHash: Bytes!
  creationDate: BigInt!
  startLogIndex: BigInt!
  isRetract: Boolean!
  offerGives: [String!]!
  kandel: Kandel!
}

input KandelPopulateRetract_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  creationDate: BigInt
  creationDate_not: BigInt
  creationDate_gt: BigInt
  creationDate_lt: BigInt
  creationDate_gte: BigInt
  creationDate_lte: BigInt
  creationDate_in: [BigInt!]
  creationDate_not_in: [BigInt!]
  startLogIndex: BigInt
  startLogIndex_not: BigInt
  startLogIndex_gt: BigInt
  startLogIndex_lt: BigInt
  startLogIndex_gte: BigInt
  startLogIndex_lte: BigInt
  startLogIndex_in: [BigInt!]
  startLogIndex_not_in: [BigInt!]
  isRetract: Boolean
  isRetract_not: Boolean
  isRetract_in: [Boolean!]
  isRetract_not_in: [Boolean!]
  offerGives: [String!]
  offerGives_not: [String!]
  offerGives_contains: [String!]
  offerGives_contains_nocase: [String!]
  offerGives_not_contains: [String!]
  offerGives_not_contains_nocase: [String!]
  kandel: String
  kandel_not: String
  kandel_gt: String
  kandel_lt: String
  kandel_gte: String
  kandel_lte: String
  kandel_in: [String!]
  kandel_not_in: [String!]
  kandel_contains: String
  kandel_contains_nocase: String
  kandel_not_contains: String
  kandel_not_contains_nocase: String
  kandel_starts_with: String
  kandel_starts_with_nocase: String
  kandel_not_starts_with: String
  kandel_not_starts_with_nocase: String
  kandel_ends_with: String
  kandel_ends_with_nocase: String
  kandel_not_ends_with: String
  kandel_not_ends_with_nocase: String
  kandel_: Kandel_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [KandelPopulateRetract_filter]
  or: [KandelPopulateRetract_filter]
}

enum KandelPopulateRetract_orderBy {
  id
  transactionHash
  creationDate
  startLogIndex
  isRetract
  offerGives
  kandel
  kandel__id
  kandel__transactionHash
  kandel__creationDate
  kandel__seeder
  kandel__address
  kandel__base
  kandel__quote
  kandel__reserveId
  kandel__router
  kandel__depositedBase
  kandel__depositedQuote
  kandel__gasprice
  kandel__gasreq
  kandel__compoundRateBase
  kandel__compoundRateQuote
  kandel__spread
  kandel__ratio
  kandel__length
}

input Kandel_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  creationDate: BigInt
  creationDate_not: BigInt
  creationDate_gt: BigInt
  creationDate_lt: BigInt
  creationDate_gte: BigInt
  creationDate_lte: BigInt
  creationDate_in: [BigInt!]
  creationDate_not_in: [BigInt!]
  seeder: Bytes
  seeder_not: Bytes
  seeder_gt: Bytes
  seeder_lt: Bytes
  seeder_gte: Bytes
  seeder_lte: Bytes
  seeder_in: [Bytes!]
  seeder_not_in: [Bytes!]
  seeder_contains: Bytes
  seeder_not_contains: Bytes
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  base: Bytes
  base_not: Bytes
  base_gt: Bytes
  base_lt: Bytes
  base_gte: Bytes
  base_lte: Bytes
  base_in: [Bytes!]
  base_not_in: [Bytes!]
  base_contains: Bytes
  base_not_contains: Bytes
  quote: Bytes
  quote_not: Bytes
  quote_gt: Bytes
  quote_lt: Bytes
  quote_gte: Bytes
  quote_lte: Bytes
  quote_in: [Bytes!]
  quote_not_in: [Bytes!]
  quote_contains: Bytes
  quote_not_contains: Bytes
  deployer: String
  deployer_not: String
  deployer_gt: String
  deployer_lt: String
  deployer_gte: String
  deployer_lte: String
  deployer_in: [String!]
  deployer_not_in: [String!]
  deployer_contains: String
  deployer_contains_nocase: String
  deployer_not_contains: String
  deployer_not_contains_nocase: String
  deployer_starts_with: String
  deployer_starts_with_nocase: String
  deployer_not_starts_with: String
  deployer_not_starts_with_nocase: String
  deployer_ends_with: String
  deployer_ends_with_nocase: String
  deployer_not_ends_with: String
  deployer_not_ends_with_nocase: String
  deployer_: Account_filter
  admin: String
  admin_not: String
  admin_gt: String
  admin_lt: String
  admin_gte: String
  admin_lte: String
  admin_in: [String!]
  admin_not_in: [String!]
  admin_contains: String
  admin_contains_nocase: String
  admin_not_contains: String
  admin_not_contains_nocase: String
  admin_starts_with: String
  admin_starts_with_nocase: String
  admin_not_starts_with: String
  admin_not_starts_with_nocase: String
  admin_ends_with: String
  admin_ends_with_nocase: String
  admin_not_ends_with: String
  admin_not_ends_with_nocase: String
  admin_: Account_filter
  reserveId: Bytes
  reserveId_not: Bytes
  reserveId_gt: Bytes
  reserveId_lt: Bytes
  reserveId_gte: Bytes
  reserveId_lte: Bytes
  reserveId_in: [Bytes!]
  reserveId_not_in: [Bytes!]
  reserveId_contains: Bytes
  reserveId_not_contains: Bytes
  router: Bytes
  router_not: Bytes
  router_gt: Bytes
  router_lt: Bytes
  router_gte: Bytes
  router_lte: Bytes
  router_in: [Bytes!]
  router_not_in: [Bytes!]
  router_contains: Bytes
  router_not_contains: Bytes
  depositedBase: BigInt
  depositedBase_not: BigInt
  depositedBase_gt: BigInt
  depositedBase_lt: BigInt
  depositedBase_gte: BigInt
  depositedBase_lte: BigInt
  depositedBase_in: [BigInt!]
  depositedBase_not_in: [BigInt!]
  depositedQuote: BigInt
  depositedQuote_not: BigInt
  depositedQuote_gt: BigInt
  depositedQuote_lt: BigInt
  depositedQuote_gte: BigInt
  depositedQuote_lte: BigInt
  depositedQuote_in: [BigInt!]
  depositedQuote_not_in: [BigInt!]
  gasprice: BigInt
  gasprice_not: BigInt
  gasprice_gt: BigInt
  gasprice_lt: BigInt
  gasprice_gte: BigInt
  gasprice_lte: BigInt
  gasprice_in: [BigInt!]
  gasprice_not_in: [BigInt!]
  gasreq: BigInt
  gasreq_not: BigInt
  gasreq_gt: BigInt
  gasreq_lt: BigInt
  gasreq_gte: BigInt
  gasreq_lte: BigInt
  gasreq_in: [BigInt!]
  gasreq_not_in: [BigInt!]
  compoundRateBase: BigInt
  compoundRateBase_not: BigInt
  compoundRateBase_gt: BigInt
  compoundRateBase_lt: BigInt
  compoundRateBase_gte: BigInt
  compoundRateBase_lte: BigInt
  compoundRateBase_in: [BigInt!]
  compoundRateBase_not_in: [BigInt!]
  compoundRateQuote: BigInt
  compoundRateQuote_not: BigInt
  compoundRateQuote_gt: BigInt
  compoundRateQuote_lt: BigInt
  compoundRateQuote_gte: BigInt
  compoundRateQuote_lte: BigInt
  compoundRateQuote_in: [BigInt!]
  compoundRateQuote_not_in: [BigInt!]
  spread: BigInt
  spread_not: BigInt
  spread_gt: BigInt
  spread_lt: BigInt
  spread_gte: BigInt
  spread_lte: BigInt
  spread_in: [BigInt!]
  spread_not_in: [BigInt!]
  ratio: BigInt
  ratio_not: BigInt
  ratio_gt: BigInt
  ratio_lt: BigInt
  ratio_gte: BigInt
  ratio_lte: BigInt
  ratio_in: [BigInt!]
  ratio_not_in: [BigInt!]
  length: BigInt
  length_not: BigInt
  length_gt: BigInt
  length_lt: BigInt
  length_gte: BigInt
  length_lte: BigInt
  length_in: [BigInt!]
  length_not_in: [BigInt!]
  offerIndexes: [String!]
  offerIndexes_not: [String!]
  offerIndexes_contains: [String!]
  offerIndexes_contains_nocase: [String!]
  offerIndexes_not_contains: [String!]
  offerIndexes_not_contains_nocase: [String!]
  offers_: Offer_filter
  depositWithdraws_: KandelDepositWithdraw_filter
  parameters_: KandelParameters_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [Kandel_filter]
  or: [Kandel_filter]
}

enum Kandel_orderBy {
  id
  transactionHash
  creationDate
  seeder
  address
  base
  quote
  deployer
  deployer__id
  deployer__address
  deployer__creationDate
  deployer__latestInteractionDate
  admin
  admin__id
  admin__address
  admin__creationDate
  admin__latestInteractionDate
  reserveId
  router
  depositedBase
  depositedQuote
  gasprice
  gasreq
  compoundRateBase
  compoundRateQuote
  spread
  ratio
  length
  offerIndexes
  offers
  depositWithdraws
  parameters
}

type LimitOrder {
  id: String!
  creationDate: BigInt!
  latestUpdateDate: BigInt!
  wants: BigInt!
  gives: BigInt!
  expiryDate: BigInt
  fillWants: Boolean!
  fillOrKill: Boolean!
  restingOrder: Boolean!
  realTaker: Account
  offer: Offer
  isOpen: Boolean
  order: Order!
}

input LimitOrder_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  creationDate: BigInt
  creationDate_not: BigInt
  creationDate_gt: BigInt
  creationDate_lt: BigInt
  creationDate_gte: BigInt
  creationDate_lte: BigInt
  creationDate_in: [BigInt!]
  creationDate_not_in: [BigInt!]
  latestUpdateDate: BigInt
  latestUpdateDate_not: BigInt
  latestUpdateDate_gt: BigInt
  latestUpdateDate_lt: BigInt
  latestUpdateDate_gte: BigInt
  latestUpdateDate_lte: BigInt
  latestUpdateDate_in: [BigInt!]
  latestUpdateDate_not_in: [BigInt!]
  wants: BigInt
  wants_not: BigInt
  wants_gt: BigInt
  wants_lt: BigInt
  wants_gte: BigInt
  wants_lte: BigInt
  wants_in: [BigInt!]
  wants_not_in: [BigInt!]
  gives: BigInt
  gives_not: BigInt
  gives_gt: BigInt
  gives_lt: BigInt
  gives_gte: BigInt
  gives_lte: BigInt
  gives_in: [BigInt!]
  gives_not_in: [BigInt!]
  expiryDate: BigInt
  expiryDate_not: BigInt
  expiryDate_gt: BigInt
  expiryDate_lt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]
  fillWants: Boolean
  fillWants_not: Boolean
  fillWants_in: [Boolean!]
  fillWants_not_in: [Boolean!]
  fillOrKill: Boolean
  fillOrKill_not: Boolean
  fillOrKill_in: [Boolean!]
  fillOrKill_not_in: [Boolean!]
  restingOrder: Boolean
  restingOrder_not: Boolean
  restingOrder_in: [Boolean!]
  restingOrder_not_in: [Boolean!]
  realTaker: String
  realTaker_not: String
  realTaker_gt: String
  realTaker_lt: String
  realTaker_gte: String
  realTaker_lte: String
  realTaker_in: [String!]
  realTaker_not_in: [String!]
  realTaker_contains: String
  realTaker_contains_nocase: String
  realTaker_not_contains: String
  realTaker_not_contains_nocase: String
  realTaker_starts_with: String
  realTaker_starts_with_nocase: String
  realTaker_not_starts_with: String
  realTaker_not_starts_with_nocase: String
  realTaker_ends_with: String
  realTaker_ends_with_nocase: String
  realTaker_not_ends_with: String
  realTaker_not_ends_with_nocase: String
  realTaker_: Account_filter
  offer: String
  offer_not: String
  offer_gt: String
  offer_lt: String
  offer_gte: String
  offer_lte: String
  offer_in: [String!]
  offer_not_in: [String!]
  offer_contains: String
  offer_contains_nocase: String
  offer_not_contains: String
  offer_not_contains_nocase: String
  offer_starts_with: String
  offer_starts_with_nocase: String
  offer_not_starts_with: String
  offer_not_starts_with_nocase: String
  offer_ends_with: String
  offer_ends_with_nocase: String
  offer_not_ends_with: String
  offer_not_ends_with_nocase: String
  offer_: Offer_filter
  isOpen: Boolean
  isOpen_not: Boolean
  isOpen_in: [Boolean!]
  isOpen_not_in: [Boolean!]
  order: String
  order_not: String
  order_gt: String
  order_lt: String
  order_gte: String
  order_lte: String
  order_in: [String!]
  order_not_in: [String!]
  order_contains: String
  order_contains_nocase: String
  order_not_contains: String
  order_not_contains_nocase: String
  order_starts_with: String
  order_starts_with_nocase: String
  order_not_starts_with: String
  order_not_starts_with_nocase: String
  order_ends_with: String
  order_ends_with_nocase: String
  order_not_ends_with: String
  order_not_ends_with_nocase: String
  order_: Order_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [LimitOrder_filter]
  or: [LimitOrder_filter]
}

enum LimitOrder_orderBy {
  id
  creationDate
  latestUpdateDate
  wants
  gives
  expiryDate
  fillWants
  fillOrKill
  restingOrder
  realTaker
  realTaker__id
  realTaker__address
  realTaker__creationDate
  realTaker__latestInteractionDate
  offer
  offer__id
  offer__latestTransactionHash
  offer__latestLogIndex
  offer__creationDate
  offer__latestUpdateDate
  offer__offerId
  offer__wants
  offer__gives
  offer__gasprice
  offer__gasreq
  offer__gasBase
  offer__prev
  offer__isOpen
  offer__isFailed
  offer__isFilled
  offer__isRetracted
  offer__failedReason
  offer__posthookFailReason
  offer__deprovisioned
  offer__totalGot
  offer__totalGave
  offer__prevGives
  offer__prevWants
  isOpen
  order
  order__id
  order__transactionHash
  order__creationDate
  order__takerGot
  order__takerGave
  order__penalty
  order__feePaid
}

type Market {
  id: String!
  outbound_tkn: Bytes!
  inbound_tkn: Bytes!
  active: Boolean!
  gasbase: BigInt!
}

input Market_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  outbound_tkn: Bytes
  outbound_tkn_not: Bytes
  outbound_tkn_gt: Bytes
  outbound_tkn_lt: Bytes
  outbound_tkn_gte: Bytes
  outbound_tkn_lte: Bytes
  outbound_tkn_in: [Bytes!]
  outbound_tkn_not_in: [Bytes!]
  outbound_tkn_contains: Bytes
  outbound_tkn_not_contains: Bytes
  inbound_tkn: Bytes
  inbound_tkn_not: Bytes
  inbound_tkn_gt: Bytes
  inbound_tkn_lt: Bytes
  inbound_tkn_gte: Bytes
  inbound_tkn_lte: Bytes
  inbound_tkn_in: [Bytes!]
  inbound_tkn_not_in: [Bytes!]
  inbound_tkn_contains: Bytes
  inbound_tkn_not_contains: Bytes
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]
  gasbase: BigInt
  gasbase_not: BigInt
  gasbase_gt: BigInt
  gasbase_lt: BigInt
  gasbase_gte: BigInt
  gasbase_lte: BigInt
  gasbase_in: [BigInt!]
  gasbase_not_in: [BigInt!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [Market_filter]
  or: [Market_filter]
}

enum Market_orderBy {
  id
  outbound_tkn
  inbound_tkn
  active
  gasbase
}

type Offer {
  id: String!
  latestTransactionHash: Bytes!
  latestLogIndex: BigInt!
  creationDate: BigInt!
  latestUpdateDate: BigInt!
  offerId: BigInt!
  wants: BigInt!
  gives: BigInt!
  gasprice: BigInt!
  gasreq: BigInt!
  gasBase: BigInt!
  prev: BigInt!
  isOpen: Boolean!
  isFailed: Boolean!
  isFilled: Boolean!
  isRetracted: Boolean!
  failedReason: Bytes
  posthookFailReason: Bytes
  deprovisioned: Boolean!
  totalGot: BigInt!
  totalGave: BigInt!
  prevGives: BigInt
  prevWants: BigInt
  market: Market!
  maker: Account!
  owner: Account
  kandel: Kandel
}

input Offer_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  latestTransactionHash: Bytes
  latestTransactionHash_not: Bytes
  latestTransactionHash_gt: Bytes
  latestTransactionHash_lt: Bytes
  latestTransactionHash_gte: Bytes
  latestTransactionHash_lte: Bytes
  latestTransactionHash_in: [Bytes!]
  latestTransactionHash_not_in: [Bytes!]
  latestTransactionHash_contains: Bytes
  latestTransactionHash_not_contains: Bytes
  latestLogIndex: BigInt
  latestLogIndex_not: BigInt
  latestLogIndex_gt: BigInt
  latestLogIndex_lt: BigInt
  latestLogIndex_gte: BigInt
  latestLogIndex_lte: BigInt
  latestLogIndex_in: [BigInt!]
  latestLogIndex_not_in: [BigInt!]
  creationDate: BigInt
  creationDate_not: BigInt
  creationDate_gt: BigInt
  creationDate_lt: BigInt
  creationDate_gte: BigInt
  creationDate_lte: BigInt
  creationDate_in: [BigInt!]
  creationDate_not_in: [BigInt!]
  latestUpdateDate: BigInt
  latestUpdateDate_not: BigInt
  latestUpdateDate_gt: BigInt
  latestUpdateDate_lt: BigInt
  latestUpdateDate_gte: BigInt
  latestUpdateDate_lte: BigInt
  latestUpdateDate_in: [BigInt!]
  latestUpdateDate_not_in: [BigInt!]
  offerId: BigInt
  offerId_not: BigInt
  offerId_gt: BigInt
  offerId_lt: BigInt
  offerId_gte: BigInt
  offerId_lte: BigInt
  offerId_in: [BigInt!]
  offerId_not_in: [BigInt!]
  wants: BigInt
  wants_not: BigInt
  wants_gt: BigInt
  wants_lt: BigInt
  wants_gte: BigInt
  wants_lte: BigInt
  wants_in: [BigInt!]
  wants_not_in: [BigInt!]
  gives: BigInt
  gives_not: BigInt
  gives_gt: BigInt
  gives_lt: BigInt
  gives_gte: BigInt
  gives_lte: BigInt
  gives_in: [BigInt!]
  gives_not_in: [BigInt!]
  gasprice: BigInt
  gasprice_not: BigInt
  gasprice_gt: BigInt
  gasprice_lt: BigInt
  gasprice_gte: BigInt
  gasprice_lte: BigInt
  gasprice_in: [BigInt!]
  gasprice_not_in: [BigInt!]
  gasreq: BigInt
  gasreq_not: BigInt
  gasreq_gt: BigInt
  gasreq_lt: BigInt
  gasreq_gte: BigInt
  gasreq_lte: BigInt
  gasreq_in: [BigInt!]
  gasreq_not_in: [BigInt!]
  gasBase: BigInt
  gasBase_not: BigInt
  gasBase_gt: BigInt
  gasBase_lt: BigInt
  gasBase_gte: BigInt
  gasBase_lte: BigInt
  gasBase_in: [BigInt!]
  gasBase_not_in: [BigInt!]
  prev: BigInt
  prev_not: BigInt
  prev_gt: BigInt
  prev_lt: BigInt
  prev_gte: BigInt
  prev_lte: BigInt
  prev_in: [BigInt!]
  prev_not_in: [BigInt!]
  isOpen: Boolean
  isOpen_not: Boolean
  isOpen_in: [Boolean!]
  isOpen_not_in: [Boolean!]
  isFailed: Boolean
  isFailed_not: Boolean
  isFailed_in: [Boolean!]
  isFailed_not_in: [Boolean!]
  isFilled: Boolean
  isFilled_not: Boolean
  isFilled_in: [Boolean!]
  isFilled_not_in: [Boolean!]
  isRetracted: Boolean
  isRetracted_not: Boolean
  isRetracted_in: [Boolean!]
  isRetracted_not_in: [Boolean!]
  failedReason: Bytes
  failedReason_not: Bytes
  failedReason_gt: Bytes
  failedReason_lt: Bytes
  failedReason_gte: Bytes
  failedReason_lte: Bytes
  failedReason_in: [Bytes!]
  failedReason_not_in: [Bytes!]
  failedReason_contains: Bytes
  failedReason_not_contains: Bytes
  posthookFailReason: Bytes
  posthookFailReason_not: Bytes
  posthookFailReason_gt: Bytes
  posthookFailReason_lt: Bytes
  posthookFailReason_gte: Bytes
  posthookFailReason_lte: Bytes
  posthookFailReason_in: [Bytes!]
  posthookFailReason_not_in: [Bytes!]
  posthookFailReason_contains: Bytes
  posthookFailReason_not_contains: Bytes
  deprovisioned: Boolean
  deprovisioned_not: Boolean
  deprovisioned_in: [Boolean!]
  deprovisioned_not_in: [Boolean!]
  totalGot: BigInt
  totalGot_not: BigInt
  totalGot_gt: BigInt
  totalGot_lt: BigInt
  totalGot_gte: BigInt
  totalGot_lte: BigInt
  totalGot_in: [BigInt!]
  totalGot_not_in: [BigInt!]
  totalGave: BigInt
  totalGave_not: BigInt
  totalGave_gt: BigInt
  totalGave_lt: BigInt
  totalGave_gte: BigInt
  totalGave_lte: BigInt
  totalGave_in: [BigInt!]
  totalGave_not_in: [BigInt!]
  prevGives: BigInt
  prevGives_not: BigInt
  prevGives_gt: BigInt
  prevGives_lt: BigInt
  prevGives_gte: BigInt
  prevGives_lte: BigInt
  prevGives_in: [BigInt!]
  prevGives_not_in: [BigInt!]
  prevWants: BigInt
  prevWants_not: BigInt
  prevWants_gt: BigInt
  prevWants_lt: BigInt
  prevWants_gte: BigInt
  prevWants_lte: BigInt
  prevWants_in: [BigInt!]
  prevWants_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  maker: String
  maker_not: String
  maker_gt: String
  maker_lt: String
  maker_gte: String
  maker_lte: String
  maker_in: [String!]
  maker_not_in: [String!]
  maker_contains: String
  maker_contains_nocase: String
  maker_not_contains: String
  maker_not_contains_nocase: String
  maker_starts_with: String
  maker_starts_with_nocase: String
  maker_not_starts_with: String
  maker_not_starts_with_nocase: String
  maker_ends_with: String
  maker_ends_with_nocase: String
  maker_not_ends_with: String
  maker_not_ends_with_nocase: String
  maker_: Account_filter
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter
  kandel: String
  kandel_not: String
  kandel_gt: String
  kandel_lt: String
  kandel_gte: String
  kandel_lte: String
  kandel_in: [String!]
  kandel_not_in: [String!]
  kandel_contains: String
  kandel_contains_nocase: String
  kandel_not_contains: String
  kandel_not_contains_nocase: String
  kandel_starts_with: String
  kandel_starts_with_nocase: String
  kandel_not_starts_with: String
  kandel_not_starts_with_nocase: String
  kandel_ends_with: String
  kandel_ends_with_nocase: String
  kandel_not_ends_with: String
  kandel_not_ends_with_nocase: String
  kandel_: Kandel_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [Offer_filter]
  or: [Offer_filter]
}

enum Offer_orderBy {
  id
  latestTransactionHash
  latestLogIndex
  creationDate
  latestUpdateDate
  offerId
  wants
  gives
  gasprice
  gasreq
  gasBase
  prev
  isOpen
  isFailed
  isFilled
  isRetracted
  failedReason
  posthookFailReason
  deprovisioned
  totalGot
  totalGave
  prevGives
  prevWants
  market
  market__id
  market__outbound_tkn
  market__inbound_tkn
  market__active
  market__gasbase
  maker
  maker__id
  maker__address
  maker__creationDate
  maker__latestInteractionDate
  owner
  owner__id
  owner__address
  owner__creationDate
  owner__latestInteractionDate
  kandel
  kandel__id
  kandel__transactionHash
  kandel__creationDate
  kandel__seeder
  kandel__address
  kandel__base
  kandel__quote
  kandel__reserveId
  kandel__router
  kandel__depositedBase
  kandel__depositedQuote
  kandel__gasprice
  kandel__gasreq
  kandel__compoundRateBase
  kandel__compoundRateQuote
  kandel__spread
  kandel__ratio
  kandel__length
}

type Order {
  id: String!
  transactionHash: Bytes!
  creationDate: BigInt!
  taker: Account
  takerGot: BigInt
  takerGave: BigInt
  penalty: BigInt
  feePaid: BigInt
  market: Market
  limitOrder: LimitOrder
}

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
  asc
  desc
}

type OrderStack {
  id: String!
  ids: String!
  last: Order
}

input OrderStack_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  ids: String
  ids_not: String
  ids_gt: String
  ids_lt: String
  ids_gte: String
  ids_lte: String
  ids_in: [String!]
  ids_not_in: [String!]
  ids_contains: String
  ids_contains_nocase: String
  ids_not_contains: String
  ids_not_contains_nocase: String
  ids_starts_with: String
  ids_starts_with_nocase: String
  ids_not_starts_with: String
  ids_not_starts_with_nocase: String
  ids_ends_with: String
  ids_ends_with_nocase: String
  ids_not_ends_with: String
  ids_not_ends_with_nocase: String
  last: String
  last_not: String
  last_gt: String
  last_lt: String
  last_gte: String
  last_lte: String
  last_in: [String!]
  last_not_in: [String!]
  last_contains: String
  last_contains_nocase: String
  last_not_contains: String
  last_not_contains_nocase: String
  last_starts_with: String
  last_starts_with_nocase: String
  last_not_starts_with: String
  last_not_starts_with_nocase: String
  last_ends_with: String
  last_ends_with_nocase: String
  last_not_ends_with: String
  last_not_ends_with_nocase: String
  last_: Order_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [OrderStack_filter]
  or: [OrderStack_filter]
}

enum OrderStack_orderBy {
  id
  ids
  last
  last__id
  last__transactionHash
  last__creationDate
  last__takerGot
  last__takerGave
  last__penalty
  last__feePaid
}

input Order_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  creationDate: BigInt
  creationDate_not: BigInt
  creationDate_gt: BigInt
  creationDate_lt: BigInt
  creationDate_gte: BigInt
  creationDate_lte: BigInt
  creationDate_in: [BigInt!]
  creationDate_not_in: [BigInt!]
  taker: String
  taker_not: String
  taker_gt: String
  taker_lt: String
  taker_gte: String
  taker_lte: String
  taker_in: [String!]
  taker_not_in: [String!]
  taker_contains: String
  taker_contains_nocase: String
  taker_not_contains: String
  taker_not_contains_nocase: String
  taker_starts_with: String
  taker_starts_with_nocase: String
  taker_not_starts_with: String
  taker_not_starts_with_nocase: String
  taker_ends_with: String
  taker_ends_with_nocase: String
  taker_not_ends_with: String
  taker_not_ends_with_nocase: String
  taker_: Account_filter
  takerGot: BigInt
  takerGot_not: BigInt
  takerGot_gt: BigInt
  takerGot_lt: BigInt
  takerGot_gte: BigInt
  takerGot_lte: BigInt
  takerGot_in: [BigInt!]
  takerGot_not_in: [BigInt!]
  takerGave: BigInt
  takerGave_not: BigInt
  takerGave_gt: BigInt
  takerGave_lt: BigInt
  takerGave_gte: BigInt
  takerGave_lte: BigInt
  takerGave_in: [BigInt!]
  takerGave_not_in: [BigInt!]
  penalty: BigInt
  penalty_not: BigInt
  penalty_gt: BigInt
  penalty_lt: BigInt
  penalty_gte: BigInt
  penalty_lte: BigInt
  penalty_in: [BigInt!]
  penalty_not_in: [BigInt!]
  feePaid: BigInt
  feePaid_not: BigInt
  feePaid_gt: BigInt
  feePaid_lt: BigInt
  feePaid_gte: BigInt
  feePaid_lte: BigInt
  feePaid_in: [BigInt!]
  feePaid_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  limitOrder: String
  limitOrder_not: String
  limitOrder_gt: String
  limitOrder_lt: String
  limitOrder_gte: String
  limitOrder_lte: String
  limitOrder_in: [String!]
  limitOrder_not_in: [String!]
  limitOrder_contains: String
  limitOrder_contains_nocase: String
  limitOrder_not_contains: String
  limitOrder_not_contains_nocase: String
  limitOrder_starts_with: String
  limitOrder_starts_with_nocase: String
  limitOrder_not_starts_with: String
  limitOrder_not_starts_with_nocase: String
  limitOrder_ends_with: String
  limitOrder_ends_with_nocase: String
  limitOrder_not_ends_with: String
  limitOrder_not_ends_with_nocase: String
  limitOrder_: LimitOrder_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [Order_filter]
  or: [Order_filter]
}

enum Order_orderBy {
  id
  transactionHash
  creationDate
  taker
  taker__id
  taker__address
  taker__creationDate
  taker__latestInteractionDate
  takerGot
  takerGave
  penalty
  feePaid
  market
  market__id
  market__outbound_tkn
  market__inbound_tkn
  market__active
  market__gasbase
  limitOrder
  limitOrder__id
  limitOrder__creationDate
  limitOrder__latestUpdateDate
  limitOrder__wants
  limitOrder__gives
  limitOrder__expiryDate
  limitOrder__fillWants
  limitOrder__fillOrKill
  limitOrder__restingOrder
  limitOrder__isOpen
}

type Query {
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  accountVolumeByPair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountVolumeByPair
  accountVolumeByPairs(
    skip: Int = 0
    first: Int = 100
    orderBy: AccountVolumeByPair_orderBy
    orderDirection: OrderDirection
    where: AccountVolumeByPair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AccountVolumeByPair!]!
  market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Market
  markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    where: Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Market!]!
  offer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Offer
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Offer!]!
  order(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Order
  orders(
    skip: Int = 0
    first: Int = 100
    orderBy: Order_orderBy
    orderDirection: OrderDirection
    where: Order_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Order!]!
  limitOrder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LimitOrder
  limitOrders(
    skip: Int = 0
    first: Int = 100
    orderBy: LimitOrder_orderBy
    orderDirection: OrderDirection
    where: LimitOrder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LimitOrder!]!
  kandelDepositWithdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): KandelDepositWithdraw
  kandelDepositWithdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: KandelDepositWithdraw_orderBy
    orderDirection: OrderDirection
    where: KandelDepositWithdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [KandelDepositWithdraw!]!
  kandel(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Kandel
  kandels(
    skip: Int = 0
    first: Int = 100
    orderBy: Kandel_orderBy
    orderDirection: OrderDirection
    where: Kandel_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Kandel!]!
  kandelPopulateRetract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): KandelPopulateRetract
  kandelPopulateRetracts(
    skip: Int = 0
    first: Int = 100
    orderBy: KandelPopulateRetract_orderBy
    orderDirection: OrderDirection
    where: KandelPopulateRetract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [KandelPopulateRetract!]!
  kandelParameters(
    skip: Int = 0
    first: Int = 100
    orderBy: KandelParameters_orderBy
    orderDirection: OrderDirection
    where: KandelParameters_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [KandelParameters!]!
  orderStack(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrderStack
  orderStacks(
    skip: Int = 0
    first: Int = 100
    orderBy: OrderStack_orderBy
    orderDirection: OrderDirection
    where: OrderStack_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrderStack!]!
  """
  Access to subgraph metadata
  """
  _meta(block: Block_height): _Meta_
}

type Subscription {
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  accountVolumeByPair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountVolumeByPair
  accountVolumeByPairs(
    skip: Int = 0
    first: Int = 100
    orderBy: AccountVolumeByPair_orderBy
    orderDirection: OrderDirection
    where: AccountVolumeByPair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AccountVolumeByPair!]!
  market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Market
  markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    where: Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Market!]!
  offer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Offer
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Offer!]!
  order(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Order
  orders(
    skip: Int = 0
    first: Int = 100
    orderBy: Order_orderBy
    orderDirection: OrderDirection
    where: Order_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Order!]!
  limitOrder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LimitOrder
  limitOrders(
    skip: Int = 0
    first: Int = 100
    orderBy: LimitOrder_orderBy
    orderDirection: OrderDirection
    where: LimitOrder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LimitOrder!]!
  kandelDepositWithdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): KandelDepositWithdraw
  kandelDepositWithdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: KandelDepositWithdraw_orderBy
    orderDirection: OrderDirection
    where: KandelDepositWithdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [KandelDepositWithdraw!]!
  kandel(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Kandel
  kandels(
    skip: Int = 0
    first: Int = 100
    orderBy: Kandel_orderBy
    orderDirection: OrderDirection
    where: Kandel_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Kandel!]!
  kandelPopulateRetract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): KandelPopulateRetract
  kandelPopulateRetracts(
    skip: Int = 0
    first: Int = 100
    orderBy: KandelPopulateRetract_orderBy
    orderDirection: OrderDirection
    where: KandelPopulateRetract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [KandelPopulateRetract!]!
  kandelParameters(
    skip: Int = 0
    first: Int = 100
    orderBy: KandelParameters_orderBy
    orderDirection: OrderDirection
    where: KandelParameters_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [KandelParameters!]!
  orderStack(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrderStack
  orderStacks(
    skip: Int = 0
    first: Int = 100
    orderBy: OrderStack_orderBy
    orderDirection: OrderDirection
    where: OrderStack_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrderStack!]!
  """
  Access to subgraph metadata
  """
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """
  The hash of the block
  """
  hash: Bytes
  """
  The block number
  """
  number: Int!
  """
  Integer representation of the timestamp stored in blocks for the chain
  """
  timestamp: Int
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  """
  block: _Block_!
  """
  The deployment ID
  """
  deployment: String!
  """
  If `true`, the subgraph encountered indexing errors at some past block
  """
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """
  Data will be returned even if the subgraph has indexing errors
  """
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}
