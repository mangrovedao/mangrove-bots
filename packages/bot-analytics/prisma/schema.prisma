// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chain {
  id   Int    @id @unique
  name String

  Block           Block[]
  Token           Token[]
  AccountActivity AccountActivity[]
}

model Block {
  number    Int
  hash      String
  timestamp DateTime

  chain   Chain @relation(fields: [chainId], references: [id])
  chainId Int

  accountActivitiesByFromBlock AccountActivity[] @relation("fromBlockActivities")
  accountActivitiesByToBlock   AccountActivity[] @relation("toBlockActivities")

  aggregatedLiquidityByFromBlock AggregatedLiquidityByMarket[] @relation("fromBlockLiquidity")
  aggregatedLiquidityByToBlock   AggregatedLiquidityByMarket[] @relation("toBlockLiquidity")

  @@id([number, chainId])
}

model Token {
  address  String
  symbol   String
  decimals Int

  chain   Chain @relation(fields: [chainId], references: [id])
  chainId Int

  token0 AccountActivity[] @relation("token0")
  token1 AccountActivity[] @relation("token1")

  aggregatedLiquidityToken0 AggregatedLiquidityByMarket[] @relation("aggregatedLiquidityToken0")
  aggregatedLiquidityToken1 AggregatedLiquidityByMarket[] @relation("aggregatedLiquidityToken1")

  @@id([address, chainId])
}

model Account {
  address String @id @unique

  AccountActivity             AccountActivity[]
  AggregatedLiquidityByMarket AggregatedLiquidityByMarket[]
}

model AccountActivity {
  id Int @id @unique @default(autoincrement())

  fromBlock   Block @relation("fromBlockActivities", fields: [fromBlockChainId, fromBlockNumber], references: [chainId, number])
  fromBlockChainId Int
  fromBlockNumber Int

  toBlock   Block @relation("toBlockActivities", fields: [toBlockChainId, toBlockNumber], references: [chainId, number])
  toBlockChainId Int
  toBlockNumber Int

  token0   Token @relation("token0", fields: [token0ChainId, token0Address], references: [chainId, address])
  token0ChainId Int
  token0Address String

  token1   Token @relation("token1", fields: [token1ChainId, token1Address], references: [chainId, address])
  token1ChainId Int
  token1Address String

  sent0     String
  received0 String

  totalSent0     String
  totalReceived0 String

  sent1     String
  received1 String

  totalSent1     String
  totalReceived1 String

  chain   Chain @relation(fields: [chainId], references: [id])
  chainId Int

  account   Account @relation(fields: [accountId], references: [address])
  accountId String

  asMaker Boolean
}

model AggregatedLiquidityByMarket {
  id Int @id @unique @default(autoincrement())

  fromBlock   Block @relation("fromBlockLiquidity", fields: [fromBlockChainId, fromBlockNumber], references: [chainId, number])
  fromBlockChainId Int
  fromBlockNumber Int

  toBlock   Block @relation("toBlockLiquidity", fields: [toBlockChainId, toBlockNumber], references: [chainId, number])
  toBlockChainId Int
  toBlockNumber Int

  token0   Token @relation("aggregatedLiquidityToken0", fields: [token0ChainId, token0Address], references: [chainId, address])
  token0ChainId Int
  token0Address String

  token1   Token @relation("aggregatedLiquidityToken1", fields: [token1ChainId, token1Address], references: [chainId, address])
  token1ChainId Int
  token1Address String

  amountToken0 String
  amountToken1 String

  account   Account @relation(fields: [accountId], references: [address])
  accountId String
}
